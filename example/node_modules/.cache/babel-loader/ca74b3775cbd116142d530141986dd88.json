{"ast":null,"code":"import { makeStyles, Box, Container, Typography } from '@material-ui/core';\nimport { SpeedDial, SpeedDialAction } from '@material-ui/lab';\nimport React__default, { useState, createElement } from 'react';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport PetsIcon from '@material-ui/icons/Pets';\nimport Web3 from 'web3';\nimport Web3Modal from 'web3modal'; // A type of promise-like that resolves synchronously and supports only one observer\n\nconst _Pact = /*#__PURE__*/function () {\n  function _Pact() {}\n\n  _Pact.prototype.then = function (onFulfilled, onRejected) {\n    const result = new _Pact();\n    const state = this.s;\n\n    if (state) {\n      const callback = state & 1 ? onFulfilled : onRejected;\n\n      if (callback) {\n        try {\n          _settle(result, 1, callback(this.v));\n        } catch (e) {\n          _settle(result, 2, e);\n        }\n\n        return result;\n      } else {\n        return this;\n      }\n    }\n\n    this.o = function (_this) {\n      try {\n        const value = _this.v;\n\n        if (_this.s & 1) {\n          _settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n        } else if (onRejected) {\n          _settle(result, 1, onRejected(value));\n        } else {\n          _settle(result, 2, value);\n        }\n      } catch (e) {\n        _settle(result, 2, e);\n      }\n    };\n\n    return result;\n  };\n\n  return _Pact;\n}(); // Settles a pact synchronously\n\n\nfunction _settle(pact, state, value) {\n  if (!pact.s) {\n    if (value instanceof _Pact) {\n      if (value.s) {\n        if (state & 1) {\n          state = value.s;\n        }\n\n        value = value.v;\n      } else {\n        value.o = _settle.bind(null, pact, state);\n        return;\n      }\n    }\n\n    if (value && value.then) {\n      value.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n      return;\n    }\n\n    pact.s = state;\n    pact.v = value;\n    const observer = pact.o;\n\n    if (observer) {\n      observer(pact);\n    }\n  }\n}\n\nfunction _isSettledPact(thenable) {\n  return thenable instanceof _Pact && thenable.s & 1;\n} // Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\n\n\nfunction _forTo(array, body, check) {\n  var i = -1,\n      pact,\n      reject;\n\n  function _cycle(result) {\n    try {\n      while (++i < array.length && (!check || !check())) {\n        result = body(i);\n\n        if (result && result.then) {\n          if (_isSettledPact(result)) {\n            result = result.v;\n          } else {\n            result.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n            return;\n          }\n        }\n      }\n\n      if (pact) {\n        _settle(pact, 1, result);\n      } else {\n        pact = result;\n      }\n    } catch (e) {\n      _settle(pact || (pact = new _Pact()), 2, e);\n    }\n  }\n\n  _cycle();\n\n  return pact;\n}\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction DragMove(props) {\n  var onPointerDown = props.onPointerDown,\n      onPointerUp = props.onPointerUp,\n      onPointerMove = props.onPointerMove,\n      onDragMove = props.onDragMove,\n      children = props.children,\n      style = props.style,\n      className = props.className;\n\n  var _useState = useState(false),\n      isDragging = _useState[0],\n      setIsDragging = _useState[1];\n\n  var handlePointerDown = function handlePointerDown(e) {\n    setIsDragging(true);\n    onPointerDown(e);\n  };\n\n  var handlePointerUp = function handlePointerUp(e) {\n    setIsDragging(false);\n    onPointerUp(e);\n  };\n\n  var handlePointerMove = function handlePointerMove(e) {\n    if (isDragging) onDragMove(e);\n    onPointerMove(e);\n  };\n\n  return React__default.createElement(\"div\", {\n    onPointerDown: handlePointerDown,\n    onPointerUp: handlePointerUp,\n    onPointerMove: handlePointerMove,\n    style: style,\n    className: className\n  }, children);\n}\n\nDragMove.defaultProps = {\n  onPointerDown: function onPointerDown() {},\n  onPointerUp: function onPointerUp() {},\n  onPointerMove: function onPointerMove() {}\n};\nvar _format = \"hh-sol-artifact-1\";\nvar contractName = \"Byoa\";\nvar sourceName = \"contracts/byoa.sol\";\nvar abi = [{\n  inputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"constructor\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"approved\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"operator\",\n    type: \"address\"\n  }, {\n    indexed: false,\n    internalType: \"bool\",\n    name: \"approved\",\n    type: \"bool\"\n  }],\n  name: \"ApprovalForAll\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"previousAdminRole\",\n    type: \"bytes32\"\n  }, {\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"newAdminRole\",\n    type: \"bytes32\"\n  }],\n  name: \"RoleAdminChanged\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }],\n  name: \"RoleGranted\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"sender\",\n    type: \"address\"\n  }],\n  name: \"RoleRevoked\",\n  type: \"event\"\n}, {\n  anonymous: false,\n  inputs: [{\n    indexed: true,\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    indexed: true,\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"Transfer\",\n  type: \"event\"\n}, {\n  inputs: [],\n  name: \"DEFAULT_ADMIN_ROLE\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"DEVELOPER_ROLE\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"approve\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"string\",\n    name: \"name\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"description\",\n    type: \"string\"\n  }, {\n    internalType: \"uint256\",\n    name: \"price\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string\",\n    name: \"_tokenURI\",\n    type: \"string\"\n  }],\n  name: \"createApp\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"appId\",\n    type: \"uint256\"\n  }],\n  name: \"getAppDetailsById\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"name\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"description\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"_tokenURI\",\n    type: \"string\"\n  }, {\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"price\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"_tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"getAppIdByTokenId\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"getAppIds\",\n  outputs: [{\n    internalType: \"uint256[]\",\n    name: \"\",\n    type: \"uint256[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"getApproved\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }],\n  name: \"getRoleAdmin\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"grantRole\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"hasRole\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"operator\",\n    type: \"address\"\n  }],\n  name: \"isApprovedForAll\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"_appId\",\n    type: \"uint256\"\n  }],\n  name: \"mint\",\n  outputs: [],\n  stateMutability: \"payable\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"name\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"ownerOf\",\n  outputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"renounceRole\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes32\",\n    name: \"role\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"address\",\n    name: \"account\",\n    type: \"address\"\n  }],\n  name: \"revokeRole\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"safeTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes\",\n    name: \"_data\",\n    type: \"bytes\"\n  }],\n  name: \"safeTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"operator\",\n    type: \"address\"\n  }, {\n    internalType: \"bool\",\n    name: \"approved\",\n    type: \"bool\"\n  }],\n  name: \"setApprovalForAll\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"bytes4\",\n    name: \"interfaceId\",\n    type: \"bytes4\"\n  }],\n  name: \"supportsInterface\",\n  outputs: [{\n    internalType: \"bool\",\n    name: \"\",\n    type: \"bool\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"symbol\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"index\",\n    type: \"uint256\"\n  }],\n  name: \"tokenByIndex\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"index\",\n    type: \"uint256\"\n  }],\n  name: \"tokenOfOwnerByIndex\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"tokenURI\",\n  outputs: [{\n    internalType: \"string\",\n    name: \"\",\n    type: \"string\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"totalSupply\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"tokenId\",\n    type: \"uint256\"\n  }],\n  name: \"transferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"appId\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string\",\n    name: \"name\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"description\",\n    type: \"string\"\n  }, {\n    internalType: \"uint256\",\n    name: \"price\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string\",\n    name: \"_tokenURI\",\n    type: \"string\"\n  }],\n  name: \"updateApp\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"_owner\",\n    type: \"address\"\n  }],\n  name: \"walletOfOwner\",\n  outputs: [{\n    internalType: \"uint256[]\",\n    name: \"\",\n    type: \"uint256[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [],\n  name: \"withdrawAll\",\n  outputs: [],\n  stateMutability: \"payable\",\n  type: \"function\"\n}];\nvar bytecode = \"0x6080604052668e1bc9bf040000600d553480156200001c57600080fd5b506040518060400160405280600781526020017f42796f61205631000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f42594f415f5631000000000000000000000000000000000000000000000000008152508160009080519060200190620000a192919062000253565b508060019080519060200190620000ba92919062000253565b505050620000d26000801b33620000d860201b60201c565b62000368565b620000ea8282620000ee60201b60201c565b5050565b620001008282620001e060201b60201c565b620001dc576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001816200024b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b828054620002619062000303565b90600052602060002090601f016020900481019282620002855760008555620002d1565b82601f10620002a057805160ff1916838001178555620002d1565b82800160010185558215620002d1579182015b82811115620002d0578251825591602001919060010190620002b3565b5b509050620002e09190620002e4565b5090565b5b80821115620002ff576000816000905550600101620002e5565b5090565b600060028204905060018216806200031c57607f821691505b6020821081141562000333576200033262000339565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6152f080620003786000396000f3fe6080604052600436106101d85760003560e01c80634b42a0f81161010257806395d89b4111610095578063b88d4fde11610064578063b88d4fde14610718578063c87b56dd14610741578063d547741f1461077e578063e985e9c5146107a7576101d8565b806395d89b411461067d578063a0712d68146106a8578063a217fddf146106c4578063a22cb465146106ef576101d8565b8063853828b6116100d1578063853828b6146105ce5780639103a0e0146105d85780639118f31a1461060357806391d1485414610640576101d8565b80634b42a0f8146104da5780634f6ccce7146105175780636352211e1461055457806370a0823114610591576101d8565b80632f2ff15d1161017a57806342842e0e1161014957806342842e0e146103f6578063438b63001461041f578063458f9cfb1461045c578063471c1ea91461049d576101d8565b80632f2ff15d1461033c5780632f745c591461036557806333f717fe146103a257806336568abe146103cd576101d8565b8063095ea7b3116101b6578063095ea7b31461028257806318160ddd146102ab57806323b872dd146102d6578063248a9ca3146102ff576101d8565b806301ffc9a7146101dd57806306fdde031461021a578063081812fc14610245575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff9190613a8e565b6107e4565b6040516102119190614278565b60405180910390f35b34801561022657600080fd5b5061022f6107f6565b60405161023c91906142ae565b60405180910390f35b34801561025157600080fd5b5061026c60048036038101906102679190613ba3565b610888565b60405161027991906141ef565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a491906139e1565b61090d565b005b3480156102b757600080fd5b506102c0610a25565b6040516102cd9190614638565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f891906138cb565b610a32565b005b34801561030b57600080fd5b5061032660048036038101906103219190613a21565b610a92565b6040516103339190614293565b60405180910390f35b34801561034857600080fd5b50610363600480360381019061035e9190613a4e565b610ab2565b005b34801561037157600080fd5b5061038c600480360381019061038791906139e1565b610adb565b6040516103999190614638565b60405180910390f35b3480156103ae57600080fd5b506103b7610b80565b6040516103c49190614256565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190613a4e565b610c36565b005b34801561040257600080fd5b5061041d600480360381019061041891906138cb565b610cb9565b005b34801561042b57600080fd5b506104466004803603810190610441919061385e565b610cd9565b6040516104539190614256565b60405180910390f35b34801561046857600080fd5b50610483600480360381019061047e9190613ba3565b610de3565b6040516104949594939291906142d0565b60405180910390f35b3480156104a957600080fd5b506104c460048036038101906104bf9190613bd0565b6110b4565b6040516104d19190614638565b60405180910390f35b3480156104e657600080fd5b5061050160048036038101906104fc9190613ae8565b611545565b60405161050e9190614638565b60405180910390f35b34801561052357600080fd5b5061053e60048036038101906105399190613ba3565b6116df565b60405161054b9190614638565b60405180910390f35b34801561056057600080fd5b5061057b60048036038101906105769190613ba3565b611750565b60405161058891906141ef565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b3919061385e565b611802565b6040516105c59190614638565b60405180910390f35b6105d66118ba565b005b3480156105e457600080fd5b506105ed611946565b6040516105fa9190614293565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190613ba3565b61196a565b6040516106379190614638565b60405180910390f35b34801561064c57600080fd5b5061066760048036038101906106629190613a4e565b611987565b6040516106749190614278565b60405180910390f35b34801561068957600080fd5b506106926119f2565b60405161069f91906142ae565b60405180910390f35b6106c260048036038101906106bd9190613ba3565b611a84565b005b3480156106d057600080fd5b506106d9611bdc565b6040516106e69190614293565b60405180910390f35b3480156106fb57600080fd5b50610716600480360381019061071191906139a1565b611be3565b005b34801561072457600080fd5b5061073f600480360381019061073a919061391e565b611d64565b005b34801561074d57600080fd5b5061076860048036038101906107639190613ba3565b611dc6565b60405161077591906142ae565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a09190613a4e565b611dd8565b005b3480156107b357600080fd5b506107ce60048036038101906107c9919061388b565b611e01565b6040516107db9190614278565b60405180910390f35b60006107ef82611e95565b9050919050565b60606000805461080590614955565b80601f016020809104026020016040519081016040528092919081815260200182805461083190614955565b801561087e5780601f106108535761010080835404028352916020019161087e565b820191906000526020600020905b81548152906001019060200180831161086157829003601f168201915b5050505050905090565b600061089382611f0f565b6108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990614558565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091882611750565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610989576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610980906145b8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109a8611f7b565b73ffffffffffffffffffffffffffffffffffffffff1614806109d757506109d6816109d1611f7b565b611e01565b5b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90614458565b60405180910390fd5b610a208383611f83565b505050565b6000600880549050905090565b610a43610a3d611f7b565b8261203c565b610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a79906145d8565b60405180910390fd5b610a8d83838361211a565b505050565b6000600a6000838152602001908152602001600020600101549050919050565b610abb82610a92565b610acc81610ac7611f7b565b612376565b610ad68383612413565b505050565b6000610ae683611802565b8210610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90614358565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60606000610b8e600c6124f4565b67ffffffffffffffff811115610ba757610ba6614b1d565b5b604051908082528060200260200182016040528015610bd55781602001602082028036833780820191505090505b5090506000600190505b610be9600c6124f4565b8111610c2e578082600183610bfe9190614837565b81518110610c0f57610c0e614aee565b5b6020026020010181815250508080610c26906149b8565b915050610bdf565b508091505090565b610c3e611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca290614618565b60405180910390fd5b610cb58282612502565b5050565b610cd483838360405180602001604052806000815250611d64565b505050565b60606000610ce683611802565b90506000811415610d4357600067ffffffffffffffff811115610d0c57610d0b614b1d565b5b604051908082528060200260200182016040528015610d3a5781602001602082028036833780820191505090505b50915050610dde565b60008167ffffffffffffffff811115610d5f57610d5e614b1d565b5b604051908082528060200260200182016040528015610d8d5781602001602082028036833780820191505090505b50905060005b82811015610dd757610da58582610adb565b828281518110610db857610db7614aee565b5b6020026020010181815250508080610dcf906149b8565b915050610d93565b5080925050505b919050565b60608060606000806000600e6000888152602001908152602001600020600001541415610e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3c90614378565b60405180910390fd5b6000600e60008881526020019081526020016000206040518060c001604052908160008201548152602001600182018054610e7f90614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90614955565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b50505050508152602001600282018054610f1190614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d90614955565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b5050505050815260200160038201548152602001600482018054610fad90614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd990614955565b80156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151816040015182608001518360a001518460600151955095509550955095505091939590929450565b60006110e07f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c33611987565b61111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690614398565b60405180910390fd5b6000600e6000888152602001908152602001600020600001541415611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117090614378565b60405180910390fd5b6000600e60008881526020019081526020016000206040518060c0016040529081600082015481526020016001820180546111b390614955565b80601f01602080910402602001604051908101604052809291908181526020018280546111df90614955565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050505050815260200160028201805461124590614955565b80601f016020809104026020016040519081016040528092919081815260200182805461127190614955565b80156112be5780601f10611293576101008083540402835291602001916112be565b820191906000526020600020905b8154815290600101906020018083116112a157829003601f168201915b50505050508152602001600382015481526020016004820180546112e190614955565b80601f016020809104026020016040519081016040528092919081815260200182805461130d90614955565b801561135a5780601f1061132f5761010080835404028352916020019161135a565b820191906000526020600020905b81548152906001019060200180831161133d57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff161461142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490614518565b60405180910390fd5b6040518060c001604052808881526020018781526020018681526020018581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250600e60008981526020019081526020016000206000820151816000015560208201518160010190805190602001906114a992919061365d565b5060408201518160020190805190602001906114c692919061365d565b506060820151816003015560808201518160040190805190602001906114ed92919061365d565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508691505095945050505050565b60006115717f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c33611987565b6115b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a790614398565b60405180910390fd5b6115ba600c6125e4565b60006115c6600c6124f4565b90506040518060c001604052808281526020018781526020018681526020018581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250600e600083815260200190815260200160002060008201518160000155602082015181600101908051906020019061164492919061365d565b50604082015181600201908051906020019061166192919061365d565b5060608201518160030155608082015181600401908051906020019061168892919061365d565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080915050949350505050565b60006116e9610a25565b821061172a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611721906145f8565b60405180910390fd5b6008828154811061173e5761173d614aee565b5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f090614498565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90614478565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6118c76000801b33611987565b611906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fd906144d8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061194457600080fd5b565b7f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c81565b6000600f6000838152602001908152602001600020549050919050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054611a0190614955565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90614955565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050505050905090565b6000600e6000838152602001908152602001600020600001541415611ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad590614378565b60405180910390fd5b6000611ae8610a25565b90506000600182611af99190614756565b9050611b0533826125fa565b611b0e81611f0f565b611b1757600080fd5b82600f600083815260200190815260200160002081905550611bd781600e60008681526020019081526020016000206004018054611b5490614955565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8090614955565b8015611bcd5780601f10611ba257610100808354040283529160200191611bcd565b820191906000526020600020905b815481529060010190602001808311611bb057829003601f168201915b5050505050612618565b505050565b6000801b81565b611beb611f7b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5090614418565b60405180910390fd5b8060056000611c66611f7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611d13611f7b565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d589190614278565b60405180910390a35050565b611d75611d6f611f7b565b8361203c565b611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab906145d8565b60405180910390fd5b611dc08484848461268c565b50505050565b6060611dd1826126e8565b9050919050565b611de182610a92565b611df281611ded611f7b565b612376565b611dfc8383612502565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f085750611f078261283a565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611ff683611750565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061204782611f0f565b612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d90614438565b60405180910390fd5b600061209183611750565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061210057508373ffffffffffffffffffffffffffffffffffffffff166120e884610888565b73ffffffffffffffffffffffffffffffffffffffff16145b8061211157506121108185611e01565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661213a82611750565b73ffffffffffffffffffffffffffffffffffffffff1614612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218790614578565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f7906143f8565b60405180910390fd5b61220b8383836128b4565b612216600082611f83565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122669190614837565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122bd9190614756565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6123808282611987565b61240f576123a58173ffffffffffffffffffffffffffffffffffffffff1660146128c4565b6123b38360001c60206128c4565b6040516020016123c49291906141b5565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240691906142ae565b60405180910390fd5b5050565b61241d8282611987565b6124f0576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612495611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600081600001549050919050565b61250c8282611987565b156125e0576000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612585611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6001816000016000828254019250508190555050565b612614828260405180602001604052806000815250612b00565b5050565b61262182611f0f565b612660576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612657906144b8565b60405180910390fd5b80600b6000848152602001908152602001600020908051906020019061268792919061365d565b505050565b61269784848461211a565b6126a384848484612b5b565b6126e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d9906143b8565b60405180910390fd5b50505050565b60606126f382611f0f565b612732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272990614538565b60405180910390fd5b6000600b6000848152602001908152602001600020805461275290614955565b80601f016020809104026020016040519081016040528092919081815260200182805461277e90614955565b80156127cb5780601f106127a0576101008083540402835291602001916127cb565b820191906000526020600020905b8154815290600101906020018083116127ae57829003601f168201915b5050505050905060006127dc612cf2565b90506000815114156127f2578192505050612835565b60008251111561282757808260405160200161280f929190614191565b60405160208183030381529060405292505050612835565b61283084612d09565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806128ad57506128ac82612db0565b5b9050919050565b6128bf838383612e92565b505050565b6060600060028360026128d791906147dd565b6128e19190614756565b67ffffffffffffffff8111156128fa576128f9614b1d565b5b6040519080825280601f01601f19166020018201604052801561292c5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061296457612963614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129c8576129c7614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612a0891906147dd565b612a129190614756565b90505b6001811115612ab2577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612a5457612a53614aee565b5b1a60f81b828281518110612a6b57612a6a614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612aab9061492b565b9050612a15565b5060008414612af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aed90614338565b60405180910390fd5b8091505092915050565b612b0a8383612fa6565b612b176000848484612b5b565b612b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4d906143b8565b60405180910390fd5b505050565b6000612b7c8473ffffffffffffffffffffffffffffffffffffffff16613174565b15612ce5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ba5611f7b565b8786866040518563ffffffff1660e01b8152600401612bc7949392919061420a565b602060405180830381600087803b158015612be157600080fd5b505af1925050508015612c1257506040513d601f19601f82011682018060405250810190612c0f9190613abb565b60015b612c95573d8060008114612c42576040519150601f19603f3d011682016040523d82523d6000602084013e612c47565b606091505b50600081511415612c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c84906143b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612cea565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060612d1482611f0f565b612d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4a90614598565b60405180910390fd5b6000612d5d612cf2565b90506000815111612d7d5760405180602001604052806000815250612da8565b80612d8784613187565b604051602001612d98929190614191565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612e7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612e8b5750612e8a826132e8565b5b9050919050565b612e9d838383613352565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ee057612edb81613357565b612f1f565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612f1e57612f1d83826133a0565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f6257612f5d8161350d565b612fa1565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612fa057612f9f82826135de565b5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300d906144f8565b60405180910390fd5b61301f81611f0f565b1561305f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613056906143d8565b60405180910390fd5b61306b600083836128b4565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130bb9190614756565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b606060008214156131cf576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506132e3565b600082905060005b600082146132015780806131ea906149b8565b915050600a826131fa91906147ac565b91506131d7565b60008167ffffffffffffffff81111561321d5761321c614b1d565b5b6040519080825280601f01601f19166020018201604052801561324f5781602001600182028036833780820191505090505b5090505b600085146132dc576001826132689190614837565b9150600a856132779190614a01565b60306132839190614756565b60f81b81838151811061329957613298614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856132d591906147ac565b9450613253565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016133ad84611802565b6133b79190614837565b905060006007600084815260200190815260200160002054905081811461349c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506135219190614837565b905060006009600084815260200190815260200160002054905060006008838154811061355157613550614aee565b5b90600052602060002001549050806008838154811061357357613572614aee565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806135c2576135c1614abf565b5b6001900381819060005260206000200160009055905550505050565b60006135e983611802565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b82805461366990614955565b90600052602060002090601f01602090048101928261368b57600085556136d2565b82601f106136a457805160ff19168380011785556136d2565b828001600101855582156136d2579182015b828111156136d15782518255916020019190600101906136b6565b5b5090506136df91906136e3565b5090565b5b808211156136fc5760008160009055506001016136e4565b5090565b600061371361370e84614678565b614653565b90508281526020810184848401111561372f5761372e614b51565b5b61373a8482856148e9565b509392505050565b6000613755613750846146a9565b614653565b90508281526020810184848401111561377157613770614b51565b5b61377c8482856148e9565b509392505050565b60008135905061379381615247565b92915050565b6000813590506137a88161525e565b92915050565b6000813590506137bd81615275565b92915050565b6000813590506137d28161528c565b92915050565b6000815190506137e78161528c565b92915050565b600082601f83011261380257613801614b4c565b5b8135613812848260208601613700565b91505092915050565b600082601f8301126138305761382f614b4c565b5b8135613840848260208601613742565b91505092915050565b600081359050613858816152a3565b92915050565b60006020828403121561387457613873614b5b565b5b600061388284828501613784565b91505092915050565b600080604083850312156138a2576138a1614b5b565b5b60006138b085828601613784565b92505060206138c185828601613784565b9150509250929050565b6000806000606084860312156138e4576138e3614b5b565b5b60006138f286828701613784565b935050602061390386828701613784565b925050604061391486828701613849565b9150509250925092565b6000806000806080858703121561393857613937614b5b565b5b600061394687828801613784565b945050602061395787828801613784565b935050604061396887828801613849565b925050606085013567ffffffffffffffff81111561398957613988614b56565b5b613995878288016137ed565b91505092959194509250565b600080604083850312156139b8576139b7614b5b565b5b60006139c685828601613784565b92505060206139d785828601613799565b9150509250929050565b600080604083850312156139f8576139f7614b5b565b5b6000613a0685828601613784565b9250506020613a1785828601613849565b9150509250929050565b600060208284031215613a3757613a36614b5b565b5b6000613a45848285016137ae565b91505092915050565b60008060408385031215613a6557613a64614b5b565b5b6000613a73858286016137ae565b9250506020613a8485828601613784565b9150509250929050565b600060208284031215613aa457613aa3614b5b565b5b6000613ab2848285016137c3565b91505092915050565b600060208284031215613ad157613ad0614b5b565b5b6000613adf848285016137d8565b91505092915050565b60008060008060808587031215613b0257613b01614b5b565b5b600085013567ffffffffffffffff811115613b2057613b1f614b56565b5b613b2c8782880161381b565b945050602085013567ffffffffffffffff811115613b4d57613b4c614b56565b5b613b598782880161381b565b9350506040613b6a87828801613849565b925050606085013567ffffffffffffffff811115613b8b57613b8a614b56565b5b613b978782880161381b565b91505092959194509250565b600060208284031215613bb957613bb8614b5b565b5b6000613bc784828501613849565b91505092915050565b600080600080600060a08688031215613bec57613beb614b5b565b5b6000613bfa88828901613849565b955050602086013567ffffffffffffffff811115613c1b57613c1a614b56565b5b613c278882890161381b565b945050604086013567ffffffffffffffff811115613c4857613c47614b56565b5b613c548882890161381b565b9350506060613c6588828901613849565b925050608086013567ffffffffffffffff811115613c8657613c85614b56565b5b613c928882890161381b565b9150509295509295909350565b6000613cab8383614173565b60208301905092915050565b613cc08161486b565b82525050565b6000613cd1826146ea565b613cdb8185614718565b9350613ce6836146da565b8060005b83811015613d17578151613cfe8882613c9f565b9750613d098361470b565b925050600181019050613cea565b5085935050505092915050565b613d2d8161487d565b82525050565b613d3c81614889565b82525050565b6000613d4d826146f5565b613d578185614729565b9350613d678185602086016148f8565b613d7081614b60565b840191505092915050565b6000613d8682614700565b613d90818561473a565b9350613da08185602086016148f8565b613da981614b60565b840191505092915050565b6000613dbf82614700565b613dc9818561474b565b9350613dd98185602086016148f8565b80840191505092915050565b6000613df260208361473a565b9150613dfd82614b71565b602082019050919050565b6000613e15602b8361473a565b9150613e2082614b9a565b604082019050919050565b6000613e3860118361473a565b9150613e4382614be9565b602082019050919050565b6000613e5b60248361473a565b9150613e6682614c12565b604082019050919050565b6000613e7e60328361473a565b9150613e8982614c61565b604082019050919050565b6000613ea1601c8361473a565b9150613eac82614cb0565b602082019050919050565b6000613ec460248361473a565b9150613ecf82614cd9565b604082019050919050565b6000613ee760198361473a565b9150613ef282614d28565b602082019050919050565b6000613f0a602c8361473a565b9150613f1582614d51565b604082019050919050565b6000613f2d60388361473a565b9150613f3882614da0565b604082019050919050565b6000613f50602a8361473a565b9150613f5b82614def565b604082019050919050565b6000613f7360298361473a565b9150613f7e82614e3e565b604082019050919050565b6000613f96602e8361473a565b9150613fa182614e8d565b604082019050919050565b6000613fb9601c8361473a565b9150613fc482614edc565b602082019050919050565b6000613fdc60208361473a565b9150613fe782614f05565b602082019050919050565b6000613fff60218361473a565b915061400a82614f2e565b604082019050919050565b600061402260318361473a565b915061402d82614f7d565b604082019050919050565b6000614045602c8361473a565b915061405082614fcc565b604082019050919050565b600061406860298361473a565b91506140738261501b565b604082019050919050565b600061408b602f8361473a565b91506140968261506a565b604082019050919050565b60006140ae60218361473a565b91506140b9826150b9565b604082019050919050565b60006140d160318361473a565b91506140dc82615108565b604082019050919050565b60006140f4602c8361473a565b91506140ff82615157565b604082019050919050565b600061411760178361474b565b9150614122826151a6565b601782019050919050565b600061413a60118361474b565b9150614145826151cf565b601182019050919050565b600061415d602f8361473a565b9150614168826151f8565b604082019050919050565b61417c816148df565b82525050565b61418b816148df565b82525050565b600061419d8285613db4565b91506141a98284613db4565b91508190509392505050565b60006141c08261410a565b91506141cc8285613db4565b91506141d78261412d565b91506141e38284613db4565b91508190509392505050565b60006020820190506142046000830184613cb7565b92915050565b600060808201905061421f6000830187613cb7565b61422c6020830186613cb7565b6142396040830185614182565b818103606083015261424b8184613d42565b905095945050505050565b600060208201905081810360008301526142708184613cc6565b905092915050565b600060208201905061428d6000830184613d24565b92915050565b60006020820190506142a86000830184613d33565b92915050565b600060208201905081810360008301526142c88184613d7b565b905092915050565b600060a08201905081810360008301526142ea8188613d7b565b905081810360208301526142fe8187613d7b565b905081810360408301526143128186613d7b565b90506143216060830185613cb7565b61432e6080830184614182565b9695505050505050565b6000602082019050818103600083015261435181613de5565b9050919050565b6000602082019050818103600083015261437181613e08565b9050919050565b6000602082019050818103600083015261439181613e2b565b9050919050565b600060208201905081810360008301526143b181613e4e565b9050919050565b600060208201905081810360008301526143d181613e71565b9050919050565b600060208201905081810360008301526143f181613e94565b9050919050565b6000602082019050818103600083015261441181613eb7565b9050919050565b6000602082019050818103600083015261443181613eda565b9050919050565b6000602082019050818103600083015261445181613efd565b9050919050565b6000602082019050818103600083015261447181613f20565b9050919050565b6000602082019050818103600083015261449181613f43565b9050919050565b600060208201905081810360008301526144b181613f66565b9050919050565b600060208201905081810360008301526144d181613f89565b9050919050565b600060208201905081810360008301526144f181613fac565b9050919050565b6000602082019050818103600083015261451181613fcf565b9050919050565b6000602082019050818103600083015261453181613ff2565b9050919050565b6000602082019050818103600083015261455181614015565b9050919050565b6000602082019050818103600083015261457181614038565b9050919050565b600060208201905081810360008301526145918161405b565b9050919050565b600060208201905081810360008301526145b18161407e565b9050919050565b600060208201905081810360008301526145d1816140a1565b9050919050565b600060208201905081810360008301526145f1816140c4565b9050919050565b60006020820190508181036000830152614611816140e7565b9050919050565b6000602082019050818103600083015261463181614150565b9050919050565b600060208201905061464d6000830184614182565b92915050565b600061465d61466e565b90506146698282614987565b919050565b6000604051905090565b600067ffffffffffffffff82111561469357614692614b1d565b5b61469c82614b60565b9050602081019050919050565b600067ffffffffffffffff8211156146c4576146c3614b1d565b5b6146cd82614b60565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614761826148df565b915061476c836148df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156147a1576147a0614a32565b5b828201905092915050565b60006147b7826148df565b91506147c2836148df565b9250826147d2576147d1614a61565b5b828204905092915050565b60006147e8826148df565b91506147f3836148df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561482c5761482b614a32565b5b828202905092915050565b6000614842826148df565b915061484d836148df565b9250828210156148605761485f614a32565b5b828203905092915050565b6000614876826148bf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156149165780820151818401526020810190506148fb565b83811115614925576000848401525b50505050565b6000614936826148df565b9150600082141561494a57614949614a32565b5b600182039050919050565b6000600282049050600182168061496d57607f821691505b6020821081141561498157614980614a90565b5b50919050565b61499082614b60565b810181811067ffffffffffffffff821117156149af576149ae614b1d565b5b80604052505050565b60006149c3826148df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149f6576149f5614a32565b5b600182019050919050565b6000614a0c826148df565b9150614a17836148df565b925082614a2757614a26614a61565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f417070204944206d757374206578697374000000000000000000000000000000600082015250565b7f4d757374206265206120646576656c6f70657220746f2063726561746520616e60008201527f2061707000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4d75737420626520616e2061646d696e20746f20776974686472617700000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f596f75206d75737420626520746865206f776e6572206f66207468697320617060008201527f7000000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6152508161486b565b811461525b57600080fd5b50565b6152678161487d565b811461527257600080fd5b50565b61527e81614889565b811461528957600080fd5b50565b61529581614893565b81146152a057600080fd5b50565b6152ac816148df565b81146152b757600080fd5b5056fea26469706673582212206d1e1f96a7981ff2283155936d935258895e739fa6191f3ee5d4c71aebe1597c64736f6c63430008060033\";\nvar deployedBytecode = \"0x6080604052600436106101d85760003560e01c80634b42a0f81161010257806395d89b4111610095578063b88d4fde11610064578063b88d4fde14610718578063c87b56dd14610741578063d547741f1461077e578063e985e9c5146107a7576101d8565b806395d89b411461067d578063a0712d68146106a8578063a217fddf146106c4578063a22cb465146106ef576101d8565b8063853828b6116100d1578063853828b6146105ce5780639103a0e0146105d85780639118f31a1461060357806391d1485414610640576101d8565b80634b42a0f8146104da5780634f6ccce7146105175780636352211e1461055457806370a0823114610591576101d8565b80632f2ff15d1161017a57806342842e0e1161014957806342842e0e146103f6578063438b63001461041f578063458f9cfb1461045c578063471c1ea91461049d576101d8565b80632f2ff15d1461033c5780632f745c591461036557806333f717fe146103a257806336568abe146103cd576101d8565b8063095ea7b3116101b6578063095ea7b31461028257806318160ddd146102ab57806323b872dd146102d6578063248a9ca3146102ff576101d8565b806301ffc9a7146101dd57806306fdde031461021a578063081812fc14610245575b600080fd5b3480156101e957600080fd5b5061020460048036038101906101ff9190613a8e565b6107e4565b6040516102119190614278565b60405180910390f35b34801561022657600080fd5b5061022f6107f6565b60405161023c91906142ae565b60405180910390f35b34801561025157600080fd5b5061026c60048036038101906102679190613ba3565b610888565b60405161027991906141ef565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a491906139e1565b61090d565b005b3480156102b757600080fd5b506102c0610a25565b6040516102cd9190614638565b60405180910390f35b3480156102e257600080fd5b506102fd60048036038101906102f891906138cb565b610a32565b005b34801561030b57600080fd5b5061032660048036038101906103219190613a21565b610a92565b6040516103339190614293565b60405180910390f35b34801561034857600080fd5b50610363600480360381019061035e9190613a4e565b610ab2565b005b34801561037157600080fd5b5061038c600480360381019061038791906139e1565b610adb565b6040516103999190614638565b60405180910390f35b3480156103ae57600080fd5b506103b7610b80565b6040516103c49190614256565b60405180910390f35b3480156103d957600080fd5b506103f460048036038101906103ef9190613a4e565b610c36565b005b34801561040257600080fd5b5061041d600480360381019061041891906138cb565b610cb9565b005b34801561042b57600080fd5b506104466004803603810190610441919061385e565b610cd9565b6040516104539190614256565b60405180910390f35b34801561046857600080fd5b50610483600480360381019061047e9190613ba3565b610de3565b6040516104949594939291906142d0565b60405180910390f35b3480156104a957600080fd5b506104c460048036038101906104bf9190613bd0565b6110b4565b6040516104d19190614638565b60405180910390f35b3480156104e657600080fd5b5061050160048036038101906104fc9190613ae8565b611545565b60405161050e9190614638565b60405180910390f35b34801561052357600080fd5b5061053e60048036038101906105399190613ba3565b6116df565b60405161054b9190614638565b60405180910390f35b34801561056057600080fd5b5061057b60048036038101906105769190613ba3565b611750565b60405161058891906141ef565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b3919061385e565b611802565b6040516105c59190614638565b60405180910390f35b6105d66118ba565b005b3480156105e457600080fd5b506105ed611946565b6040516105fa9190614293565b60405180910390f35b34801561060f57600080fd5b5061062a60048036038101906106259190613ba3565b61196a565b6040516106379190614638565b60405180910390f35b34801561064c57600080fd5b5061066760048036038101906106629190613a4e565b611987565b6040516106749190614278565b60405180910390f35b34801561068957600080fd5b506106926119f2565b60405161069f91906142ae565b60405180910390f35b6106c260048036038101906106bd9190613ba3565b611a84565b005b3480156106d057600080fd5b506106d9611bdc565b6040516106e69190614293565b60405180910390f35b3480156106fb57600080fd5b50610716600480360381019061071191906139a1565b611be3565b005b34801561072457600080fd5b5061073f600480360381019061073a919061391e565b611d64565b005b34801561074d57600080fd5b5061076860048036038101906107639190613ba3565b611dc6565b60405161077591906142ae565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a09190613a4e565b611dd8565b005b3480156107b357600080fd5b506107ce60048036038101906107c9919061388b565b611e01565b6040516107db9190614278565b60405180910390f35b60006107ef82611e95565b9050919050565b60606000805461080590614955565b80601f016020809104026020016040519081016040528092919081815260200182805461083190614955565b801561087e5780601f106108535761010080835404028352916020019161087e565b820191906000526020600020905b81548152906001019060200180831161086157829003601f168201915b5050505050905090565b600061089382611f0f565b6108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990614558565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091882611750565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610989576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610980906145b8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109a8611f7b565b73ffffffffffffffffffffffffffffffffffffffff1614806109d757506109d6816109d1611f7b565b611e01565b5b610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90614458565b60405180910390fd5b610a208383611f83565b505050565b6000600880549050905090565b610a43610a3d611f7b565b8261203c565b610a82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a79906145d8565b60405180910390fd5b610a8d83838361211a565b505050565b6000600a6000838152602001908152602001600020600101549050919050565b610abb82610a92565b610acc81610ac7611f7b565b612376565b610ad68383612413565b505050565b6000610ae683611802565b8210610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90614358565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60606000610b8e600c6124f4565b67ffffffffffffffff811115610ba757610ba6614b1d565b5b604051908082528060200260200182016040528015610bd55781602001602082028036833780820191505090505b5090506000600190505b610be9600c6124f4565b8111610c2e578082600183610bfe9190614837565b81518110610c0f57610c0e614aee565b5b6020026020010181815250508080610c26906149b8565b915050610bdf565b508091505090565b610c3e611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca290614618565b60405180910390fd5b610cb58282612502565b5050565b610cd483838360405180602001604052806000815250611d64565b505050565b60606000610ce683611802565b90506000811415610d4357600067ffffffffffffffff811115610d0c57610d0b614b1d565b5b604051908082528060200260200182016040528015610d3a5781602001602082028036833780820191505090505b50915050610dde565b60008167ffffffffffffffff811115610d5f57610d5e614b1d565b5b604051908082528060200260200182016040528015610d8d5781602001602082028036833780820191505090505b50905060005b82811015610dd757610da58582610adb565b828281518110610db857610db7614aee565b5b6020026020010181815250508080610dcf906149b8565b915050610d93565b5080925050505b919050565b60608060606000806000600e6000888152602001908152602001600020600001541415610e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3c90614378565b60405180910390fd5b6000600e60008881526020019081526020016000206040518060c001604052908160008201548152602001600182018054610e7f90614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610eab90614955565b8015610ef85780601f10610ecd57610100808354040283529160200191610ef8565b820191906000526020600020905b815481529060010190602001808311610edb57829003601f168201915b50505050508152602001600282018054610f1190614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3d90614955565b8015610f8a5780601f10610f5f57610100808354040283529160200191610f8a565b820191906000526020600020905b815481529060010190602001808311610f6d57829003601f168201915b5050505050815260200160038201548152602001600482018054610fad90614955565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd990614955565b80156110265780601f10610ffb57610100808354040283529160200191611026565b820191906000526020600020905b81548152906001019060200180831161100957829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151816040015182608001518360a001518460600151955095509550955095505091939590929450565b60006110e07f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c33611987565b61111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690614398565b60405180910390fd5b6000600e6000888152602001908152602001600020600001541415611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117090614378565b60405180910390fd5b6000600e60008881526020019081526020016000206040518060c0016040529081600082015481526020016001820180546111b390614955565b80601f01602080910402602001604051908101604052809291908181526020018280546111df90614955565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050505050815260200160028201805461124590614955565b80601f016020809104026020016040519081016040528092919081815260200182805461127190614955565b80156112be5780601f10611293576101008083540402835291602001916112be565b820191906000526020600020905b8154815290600101906020018083116112a157829003601f168201915b50505050508152602001600382015481526020016004820180546112e190614955565b80601f016020809104026020016040519081016040528092919081815260200182805461130d90614955565b801561135a5780601f1061132f5761010080835404028352916020019161135a565b820191906000526020600020905b81548152906001019060200180831161133d57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff161461142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490614518565b60405180910390fd5b6040518060c001604052808881526020018781526020018681526020018581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250600e60008981526020019081526020016000206000820151816000015560208201518160010190805190602001906114a992919061365d565b5060408201518160020190805190602001906114c692919061365d565b506060820151816003015560808201518160040190805190602001906114ed92919061365d565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508691505095945050505050565b60006115717f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c33611987565b6115b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a790614398565b60405180910390fd5b6115ba600c6125e4565b60006115c6600c6124f4565b90506040518060c001604052808281526020018781526020018681526020018581526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250600e600083815260200190815260200160002060008201518160000155602082015181600101908051906020019061164492919061365d565b50604082015181600201908051906020019061166192919061365d565b5060608201518160030155608082015181600401908051906020019061168892919061365d565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505080915050949350505050565b60006116e9610a25565b821061172a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611721906145f8565b60405180910390fd5b6008828154811061173e5761173d614aee565b5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f090614498565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90614478565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6118c76000801b33611987565b611906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fd906144d8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061194457600080fd5b565b7f4504b9dfd7400a1522f49a8b4a100552da9236849581fd59b7363eb48c6a474c81565b6000600f6000838152602001908152602001600020549050919050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054611a0190614955565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2d90614955565b8015611a7a5780601f10611a4f57610100808354040283529160200191611a7a565b820191906000526020600020905b815481529060010190602001808311611a5d57829003601f168201915b5050505050905090565b6000600e6000838152602001908152602001600020600001541415611ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad590614378565b60405180910390fd5b6000611ae8610a25565b90506000600182611af99190614756565b9050611b0533826125fa565b611b0e81611f0f565b611b1757600080fd5b82600f600083815260200190815260200160002081905550611bd781600e60008681526020019081526020016000206004018054611b5490614955565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8090614955565b8015611bcd5780601f10611ba257610100808354040283529160200191611bcd565b820191906000526020600020905b815481529060010190602001808311611bb057829003601f168201915b5050505050612618565b505050565b6000801b81565b611beb611f7b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5090614418565b60405180910390fd5b8060056000611c66611f7b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611d13611f7b565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d589190614278565b60405180910390a35050565b611d75611d6f611f7b565b8361203c565b611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab906145d8565b60405180910390fd5b611dc08484848461268c565b50505050565b6060611dd1826126e8565b9050919050565b611de182610a92565b611df281611ded611f7b565b612376565b611dfc8383612502565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f085750611f078261283a565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611ff683611750565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061204782611f0f565b612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d90614438565b60405180910390fd5b600061209183611750565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061210057508373ffffffffffffffffffffffffffffffffffffffff166120e884610888565b73ffffffffffffffffffffffffffffffffffffffff16145b8061211157506121108185611e01565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661213a82611750565b73ffffffffffffffffffffffffffffffffffffffff1614612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218790614578565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612200576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f7906143f8565b60405180910390fd5b61220b8383836128b4565b612216600082611f83565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122669190614837565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122bd9190614756565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6123808282611987565b61240f576123a58173ffffffffffffffffffffffffffffffffffffffff1660146128c4565b6123b38360001c60206128c4565b6040516020016123c49291906141b5565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240691906142ae565b60405180910390fd5b5050565b61241d8282611987565b6124f0576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612495611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600081600001549050919050565b61250c8282611987565b156125e0576000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612585611f7b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6001816000016000828254019250508190555050565b612614828260405180602001604052806000815250612b00565b5050565b61262182611f0f565b612660576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612657906144b8565b60405180910390fd5b80600b6000848152602001908152602001600020908051906020019061268792919061365d565b505050565b61269784848461211a565b6126a384848484612b5b565b6126e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d9906143b8565b60405180910390fd5b50505050565b60606126f382611f0f565b612732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272990614538565b60405180910390fd5b6000600b6000848152602001908152602001600020805461275290614955565b80601f016020809104026020016040519081016040528092919081815260200182805461277e90614955565b80156127cb5780601f106127a0576101008083540402835291602001916127cb565b820191906000526020600020905b8154815290600101906020018083116127ae57829003601f168201915b5050505050905060006127dc612cf2565b90506000815114156127f2578192505050612835565b60008251111561282757808260405160200161280f929190614191565b60405160208183030381529060405292505050612835565b61283084612d09565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806128ad57506128ac82612db0565b5b9050919050565b6128bf838383612e92565b505050565b6060600060028360026128d791906147dd565b6128e19190614756565b67ffffffffffffffff8111156128fa576128f9614b1d565b5b6040519080825280601f01601f19166020018201604052801561292c5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061296457612963614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129c8576129c7614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612a0891906147dd565b612a129190614756565b90505b6001811115612ab2577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612a5457612a53614aee565b5b1a60f81b828281518110612a6b57612a6a614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612aab9061492b565b9050612a15565b5060008414612af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aed90614338565b60405180910390fd5b8091505092915050565b612b0a8383612fa6565b612b176000848484612b5b565b612b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4d906143b8565b60405180910390fd5b505050565b6000612b7c8473ffffffffffffffffffffffffffffffffffffffff16613174565b15612ce5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ba5611f7b565b8786866040518563ffffffff1660e01b8152600401612bc7949392919061420a565b602060405180830381600087803b158015612be157600080fd5b505af1925050508015612c1257506040513d601f19601f82011682018060405250810190612c0f9190613abb565b60015b612c95573d8060008114612c42576040519150601f19603f3d011682016040523d82523d6000602084013e612c47565b606091505b50600081511415612c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c84906143b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612cea565b600190505b949350505050565b606060405180602001604052806000815250905090565b6060612d1482611f0f565b612d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4a90614598565b60405180910390fd5b6000612d5d612cf2565b90506000815111612d7d5760405180602001604052806000815250612da8565b80612d8784613187565b604051602001612d98929190614191565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612e7b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612e8b5750612e8a826132e8565b5b9050919050565b612e9d838383613352565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ee057612edb81613357565b612f1f565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612f1e57612f1d83826133a0565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f6257612f5d8161350d565b612fa1565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612fa057612f9f82826135de565b5b5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300d906144f8565b60405180910390fd5b61301f81611f0f565b1561305f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613056906143d8565b60405180910390fd5b61306b600083836128b4565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130bb9190614756565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b606060008214156131cf576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506132e3565b600082905060005b600082146132015780806131ea906149b8565b915050600a826131fa91906147ac565b91506131d7565b60008167ffffffffffffffff81111561321d5761321c614b1d565b5b6040519080825280601f01601f19166020018201604052801561324f5781602001600182028036833780820191505090505b5090505b600085146132dc576001826132689190614837565b9150600a856132779190614a01565b60306132839190614756565b60f81b81838151811061329957613298614aee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856132d591906147ac565b9450613253565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016133ad84611802565b6133b79190614837565b905060006007600084815260200190815260200160002054905081811461349c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506135219190614837565b905060006009600084815260200190815260200160002054905060006008838154811061355157613550614aee565b5b90600052602060002001549050806008838154811061357357613572614aee565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806135c2576135c1614abf565b5b6001900381819060005260206000200160009055905550505050565b60006135e983611802565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b82805461366990614955565b90600052602060002090601f01602090048101928261368b57600085556136d2565b82601f106136a457805160ff19168380011785556136d2565b828001600101855582156136d2579182015b828111156136d15782518255916020019190600101906136b6565b5b5090506136df91906136e3565b5090565b5b808211156136fc5760008160009055506001016136e4565b5090565b600061371361370e84614678565b614653565b90508281526020810184848401111561372f5761372e614b51565b5b61373a8482856148e9565b509392505050565b6000613755613750846146a9565b614653565b90508281526020810184848401111561377157613770614b51565b5b61377c8482856148e9565b509392505050565b60008135905061379381615247565b92915050565b6000813590506137a88161525e565b92915050565b6000813590506137bd81615275565b92915050565b6000813590506137d28161528c565b92915050565b6000815190506137e78161528c565b92915050565b600082601f83011261380257613801614b4c565b5b8135613812848260208601613700565b91505092915050565b600082601f8301126138305761382f614b4c565b5b8135613840848260208601613742565b91505092915050565b600081359050613858816152a3565b92915050565b60006020828403121561387457613873614b5b565b5b600061388284828501613784565b91505092915050565b600080604083850312156138a2576138a1614b5b565b5b60006138b085828601613784565b92505060206138c185828601613784565b9150509250929050565b6000806000606084860312156138e4576138e3614b5b565b5b60006138f286828701613784565b935050602061390386828701613784565b925050604061391486828701613849565b9150509250925092565b6000806000806080858703121561393857613937614b5b565b5b600061394687828801613784565b945050602061395787828801613784565b935050604061396887828801613849565b925050606085013567ffffffffffffffff81111561398957613988614b56565b5b613995878288016137ed565b91505092959194509250565b600080604083850312156139b8576139b7614b5b565b5b60006139c685828601613784565b92505060206139d785828601613799565b9150509250929050565b600080604083850312156139f8576139f7614b5b565b5b6000613a0685828601613784565b9250506020613a1785828601613849565b9150509250929050565b600060208284031215613a3757613a36614b5b565b5b6000613a45848285016137ae565b91505092915050565b60008060408385031215613a6557613a64614b5b565b5b6000613a73858286016137ae565b9250506020613a8485828601613784565b9150509250929050565b600060208284031215613aa457613aa3614b5b565b5b6000613ab2848285016137c3565b91505092915050565b600060208284031215613ad157613ad0614b5b565b5b6000613adf848285016137d8565b91505092915050565b60008060008060808587031215613b0257613b01614b5b565b5b600085013567ffffffffffffffff811115613b2057613b1f614b56565b5b613b2c8782880161381b565b945050602085013567ffffffffffffffff811115613b4d57613b4c614b56565b5b613b598782880161381b565b9350506040613b6a87828801613849565b925050606085013567ffffffffffffffff811115613b8b57613b8a614b56565b5b613b978782880161381b565b91505092959194509250565b600060208284031215613bb957613bb8614b5b565b5b6000613bc784828501613849565b91505092915050565b600080600080600060a08688031215613bec57613beb614b5b565b5b6000613bfa88828901613849565b955050602086013567ffffffffffffffff811115613c1b57613c1a614b56565b5b613c278882890161381b565b945050604086013567ffffffffffffffff811115613c4857613c47614b56565b5b613c548882890161381b565b9350506060613c6588828901613849565b925050608086013567ffffffffffffffff811115613c8657613c85614b56565b5b613c928882890161381b565b9150509295509295909350565b6000613cab8383614173565b60208301905092915050565b613cc08161486b565b82525050565b6000613cd1826146ea565b613cdb8185614718565b9350613ce6836146da565b8060005b83811015613d17578151613cfe8882613c9f565b9750613d098361470b565b925050600181019050613cea565b5085935050505092915050565b613d2d8161487d565b82525050565b613d3c81614889565b82525050565b6000613d4d826146f5565b613d578185614729565b9350613d678185602086016148f8565b613d7081614b60565b840191505092915050565b6000613d8682614700565b613d90818561473a565b9350613da08185602086016148f8565b613da981614b60565b840191505092915050565b6000613dbf82614700565b613dc9818561474b565b9350613dd98185602086016148f8565b80840191505092915050565b6000613df260208361473a565b9150613dfd82614b71565b602082019050919050565b6000613e15602b8361473a565b9150613e2082614b9a565b604082019050919050565b6000613e3860118361473a565b9150613e4382614be9565b602082019050919050565b6000613e5b60248361473a565b9150613e6682614c12565b604082019050919050565b6000613e7e60328361473a565b9150613e8982614c61565b604082019050919050565b6000613ea1601c8361473a565b9150613eac82614cb0565b602082019050919050565b6000613ec460248361473a565b9150613ecf82614cd9565b604082019050919050565b6000613ee760198361473a565b9150613ef282614d28565b602082019050919050565b6000613f0a602c8361473a565b9150613f1582614d51565b604082019050919050565b6000613f2d60388361473a565b9150613f3882614da0565b604082019050919050565b6000613f50602a8361473a565b9150613f5b82614def565b604082019050919050565b6000613f7360298361473a565b9150613f7e82614e3e565b604082019050919050565b6000613f96602e8361473a565b9150613fa182614e8d565b604082019050919050565b6000613fb9601c8361473a565b9150613fc482614edc565b602082019050919050565b6000613fdc60208361473a565b9150613fe782614f05565b602082019050919050565b6000613fff60218361473a565b915061400a82614f2e565b604082019050919050565b600061402260318361473a565b915061402d82614f7d565b604082019050919050565b6000614045602c8361473a565b915061405082614fcc565b604082019050919050565b600061406860298361473a565b91506140738261501b565b604082019050919050565b600061408b602f8361473a565b91506140968261506a565b604082019050919050565b60006140ae60218361473a565b91506140b9826150b9565b604082019050919050565b60006140d160318361473a565b91506140dc82615108565b604082019050919050565b60006140f4602c8361473a565b91506140ff82615157565b604082019050919050565b600061411760178361474b565b9150614122826151a6565b601782019050919050565b600061413a60118361474b565b9150614145826151cf565b601182019050919050565b600061415d602f8361473a565b9150614168826151f8565b604082019050919050565b61417c816148df565b82525050565b61418b816148df565b82525050565b600061419d8285613db4565b91506141a98284613db4565b91508190509392505050565b60006141c08261410a565b91506141cc8285613db4565b91506141d78261412d565b91506141e38284613db4565b91508190509392505050565b60006020820190506142046000830184613cb7565b92915050565b600060808201905061421f6000830187613cb7565b61422c6020830186613cb7565b6142396040830185614182565b818103606083015261424b8184613d42565b905095945050505050565b600060208201905081810360008301526142708184613cc6565b905092915050565b600060208201905061428d6000830184613d24565b92915050565b60006020820190506142a86000830184613d33565b92915050565b600060208201905081810360008301526142c88184613d7b565b905092915050565b600060a08201905081810360008301526142ea8188613d7b565b905081810360208301526142fe8187613d7b565b905081810360408301526143128186613d7b565b90506143216060830185613cb7565b61432e6080830184614182565b9695505050505050565b6000602082019050818103600083015261435181613de5565b9050919050565b6000602082019050818103600083015261437181613e08565b9050919050565b6000602082019050818103600083015261439181613e2b565b9050919050565b600060208201905081810360008301526143b181613e4e565b9050919050565b600060208201905081810360008301526143d181613e71565b9050919050565b600060208201905081810360008301526143f181613e94565b9050919050565b6000602082019050818103600083015261441181613eb7565b9050919050565b6000602082019050818103600083015261443181613eda565b9050919050565b6000602082019050818103600083015261445181613efd565b9050919050565b6000602082019050818103600083015261447181613f20565b9050919050565b6000602082019050818103600083015261449181613f43565b9050919050565b600060208201905081810360008301526144b181613f66565b9050919050565b600060208201905081810360008301526144d181613f89565b9050919050565b600060208201905081810360008301526144f181613fac565b9050919050565b6000602082019050818103600083015261451181613fcf565b9050919050565b6000602082019050818103600083015261453181613ff2565b9050919050565b6000602082019050818103600083015261455181614015565b9050919050565b6000602082019050818103600083015261457181614038565b9050919050565b600060208201905081810360008301526145918161405b565b9050919050565b600060208201905081810360008301526145b18161407e565b9050919050565b600060208201905081810360008301526145d1816140a1565b9050919050565b600060208201905081810360008301526145f1816140c4565b9050919050565b60006020820190508181036000830152614611816140e7565b9050919050565b6000602082019050818103600083015261463181614150565b9050919050565b600060208201905061464d6000830184614182565b92915050565b600061465d61466e565b90506146698282614987565b919050565b6000604051905090565b600067ffffffffffffffff82111561469357614692614b1d565b5b61469c82614b60565b9050602081019050919050565b600067ffffffffffffffff8211156146c4576146c3614b1d565b5b6146cd82614b60565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614761826148df565b915061476c836148df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156147a1576147a0614a32565b5b828201905092915050565b60006147b7826148df565b91506147c2836148df565b9250826147d2576147d1614a61565b5b828204905092915050565b60006147e8826148df565b91506147f3836148df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561482c5761482b614a32565b5b828202905092915050565b6000614842826148df565b915061484d836148df565b9250828210156148605761485f614a32565b5b828203905092915050565b6000614876826148bf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156149165780820151818401526020810190506148fb565b83811115614925576000848401525b50505050565b6000614936826148df565b9150600082141561494a57614949614a32565b5b600182039050919050565b6000600282049050600182168061496d57607f821691505b6020821081141561498157614980614a90565b5b50919050565b61499082614b60565b810181811067ffffffffffffffff821117156149af576149ae614b1d565b5b80604052505050565b60006149c3826148df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156149f6576149f5614a32565b5b600182019050919050565b6000614a0c826148df565b9150614a17836148df565b925082614a2757614a26614a61565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f417070204944206d757374206578697374000000000000000000000000000000600082015250565b7f4d757374206265206120646576656c6f70657220746f2063726561746520616e60008201527f2061707000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4d75737420626520616e2061646d696e20746f20776974686472617700000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f596f75206d75737420626520746865206f776e6572206f66207468697320617060008201527f7000000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6152508161486b565b811461525b57600080fd5b50565b6152678161487d565b811461527257600080fd5b50565b61527e81614889565b811461528957600080fd5b50565b61529581614893565b81146152a057600080fd5b50565b6152ac816148df565b81146152b757600080fd5b5056fea26469706673582212206d1e1f96a7981ff2283155936d935258895e739fa6191f3ee5d4c71aebe1597c64736f6c63430008060033\";\nvar linkReferences = {};\nvar deployedLinkReferences = {};\nvar abi$1 = {\n  _format: _format,\n  contractName: contractName,\n  sourceName: sourceName,\n  abi: abi,\n  bytecode: bytecode,\n  deployedBytecode: deployedBytecode,\n  linkReferences: linkReferences,\n  deployedLinkReferences: deployedLinkReferences\n};\nvar byoaContractAddress = \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\";\nvar providerNetwork = \"http://localhost:8545\";\nvar useStyles = makeStyles({\n  root: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    minWidth: '100vw',\n    minHeight: '100vh',\n    background: 'rgba(50,0,0,0.25)',\n    pointerEvents: 'none'\n  },\n  speedDial: {\n    position: 'fixed',\n    bottom: 20,\n    right: 20,\n    zIndex: 1000000000\n  },\n  byoaButton: {}\n});\nvar providerOptions = {\n  walletconnect: {\n    display: {\n      name: \"Mobile\"\n    },\n    \"package\": WalletConnectProvider,\n    options: {\n      infuraId: \"6430aa46e9354b91bea44e464af71f7a\"\n    }\n  }\n};\nvar web3Modal = new Web3Modal({\n  network: providerNetwork,\n  cacheProvider: true,\n  disableInjectedProvider: false,\n  providerOptions: providerOptions\n});\n\nvar ByoaSDK = function ByoaSDK(props) {\n  var classes = useStyles();\n\n  var _React$useState = useState({\n    x: 0,\n    y: 0\n  }),\n      translateDial = _React$useState[0],\n      setTranslateDial = _React$useState[1];\n\n  var _React$useState2 = useState(\"up\"),\n      dialDirection = _React$useState2[0],\n      setDialDirection = _React$useState2[1];\n\n  var _React$useState3 = useState(false),\n      openDial = _React$useState3[0],\n      setOpenDial = _React$useState3[1];\n\n  var _React$useState4 = useState(null),\n      provider = _React$useState4[0],\n      setProvider = _React$useState4[1];\n\n  var _React$useState5 = useState(null),\n      web3 = _React$useState5[0],\n      setWeb3 = _React$useState5[1];\n\n  var _React$useState6 = useState(null),\n      accountAddress = _React$useState6[0],\n      setAccountAddress = _React$useState6[1];\n\n  var _React$useState7 = useState([]),\n      installedApps = _React$useState7[0],\n      setInstalledApps = _React$useState7[1];\n\n  var connectWallet = function connectWallet() {\n    try {\n      var _exit2 = false;\n      return Promise.resolve(_catch(function () {\n        function _temp2(_result) {\n          if (_exit2) return _result;\n          var w3 = web3;\n\n          if (w3 === null) {\n            w3 = new Web3(p);\n\n            if (w3 === null) {\n              throw new Error('Unable to connect web3');\n            }\n\n            setWeb3(w3);\n          }\n\n          return Promise.resolve(p.request({\n            method: 'eth_accounts'\n          })).then(function (accounts) {\n            if (accounts.length > 0) {\n              setAccountAddress(accounts[0]);\n              setTimeout(function () {\n                try {\n                  refreshMyApps(accounts[0]);\n                  return Promise.resolve();\n                } catch (e) {\n                  return Promise.reject(e);\n                }\n              }, 2000);\n            }\n          });\n        }\n\n        var p = provider;\n\n        var _temp = function () {\n          if (p === null) {\n            return Promise.resolve(web3Modal.connect()).then(function (_web3Modal$connect) {\n              p = _web3Modal$connect;\n\n              if (p === null) {\n                throw new Error('Unable to connect provider to modal');\n              }\n\n              p.on('accountsChanged', function (e) {\n                console.log(e);\n                disconnectWallet();\n              });\n              p.on(\"chainChanged\", function (chainId) {\n                console.log(\"chain \" + chainId);\n              });\n              setProvider(p);\n            });\n          }\n        }();\n\n        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);\n      }, function (error) {\n        console.log(error);\n        alert('Unable to connect wallet. Please try again.');\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var disconnectWallet = function disconnectWallet() {\n    try {\n      return Promise.resolve(web3Modal.clearCachedProvider()).then(function () {\n        setProvider(null);\n        setAccountAddress(null);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var getTokenMetadata = function getTokenMetadata(uri) {\n    try {\n      return Promise.resolve(new Promise(function (resolve) {\n        resolve({\n          meta: uri,\n          image: \"ipfs://QmYoSTehmdFUnSYCFrYdvSrEtNGy9U5gWEfroCTMGecHKw/0.png\",\n          byoa: {\n            browser: {\n              uri: \"http://localhost:3000/scripts/example1.js\",\n              target: \"host\"\n            }\n          }\n        });\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var transformIPFSToPinned = function transformIPFSToPinned(ipfsURI) {\n    return \"\" + ipfsURI;\n  };\n\n  var refreshMyApps = function refreshMyApps(addressHelper) {\n    try {\n      var w3 = new Web3(providerNetwork);\n\n      var _temp8 = _catch(function () {\n        var contract = new w3.eth.Contract(abi$1.abi, byoaContractAddress);\n        return Promise.resolve(contract.methods.walletOfOwner(accountAddress ? accountAddress : addressHelper).call()).then(function (myTokenIds) {\n          function _temp6() {\n            console.log(allInstalls);\n            setInstalledApps(allInstalls);\n          }\n\n          console.log(myTokenIds);\n          var appLUT = {};\n          var allInstalls = [];\n\n          var _temp5 = _forTo(myTokenIds, function (i) {\n            var tid = parseInt(myTokenIds[i]);\n            return Promise.resolve(contract.methods.getAppIdByTokenId(tid).call()).then(function (appIdForToken) {\n              return Promise.resolve(contract.methods.tokenURI(tid).call()).then(function (directTokenURI) {\n                return Promise.resolve(getTokenMetadata(directTokenURI)).then(function (tokenMeta) {\n                  function _temp4() {\n                    var ia = {\n                      id: tid,\n                      tokenURI: directTokenURI,\n                      app: appLUT[appIdForToken],\n                      imageURI: tokenMeta.image,\n                      byoaDetails: {\n                        uri: tokenMeta.byoa.browser.uri,\n                        target: tokenMeta.byoa.browser.target\n                      }\n                    };\n                    allInstalls.push(ia);\n                  }\n\n                  var _temp3 = function () {\n                    if (appLUT[appIdForToken] !== null) {\n                      return Promise.resolve(contract.methods.getAppDetailsById(parseInt(appIdForToken)).call()).then(function (appDetails) {\n                        appLUT[appIdForToken] = {\n                          id: appIdForToken,\n                          name: appDetails[0],\n                          description: appDetails[1],\n                          tokenURI: appDetails[2],\n                          owner: appDetails[3],\n                          price: parseInt(appDetails[4]),\n                          address: byoaContractAddress,\n                          version: 'beta v0.1'\n                        };\n                      });\n                    }\n                  }();\n\n                  return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);\n                });\n              });\n            });\n          });\n\n          return _temp5 && _temp5.then ? _temp5.then(_temp6) : _temp6(_temp5);\n        });\n      }, function (error) {\n        console.log(\"Error fetching apps: \" + error);\n      });\n\n      return Promise.resolve(_temp8 && _temp8.then ? _temp8.then(function () {}) : void 0);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return createElement(Box, {\n    className: classes.root\n  }, createElement(Container, {\n    className: classes.speedDial\n  }, createElement(DragMove, {\n    onDragMove: function onDragMove(e) {\n      setTranslateDial({\n        x: translateDial.x + e.movementX,\n        y: translateDial.y + e.movementY\n      });\n\n      if (e.clientY < 200) {\n        if (dialDirection !== \"down\") setDialDirection(\"down\");\n      }\n\n      if (e.clientY > 200) {\n        if (dialDirection !== \"up\") setDialDirection(\"up\");\n      }\n    }\n  }, createElement(SpeedDial, {\n    style: {\n      transform: \"translateX(\" + translateDial.x + \"px) translateY(\" + translateDial.y + \"px)\"\n    },\n    ariaLabel: \"BYOA Speed Dial\",\n    hidden: false,\n    icon: createElement(Typography, {\n      className: classes.byoaButton\n    }, \"RUN\"),\n    open: openDial,\n    onOpen: function onOpen() {\n      setOpenDial(true);\n    },\n    onClose: function onClose() {\n      setOpenDial(false);\n    },\n    onClick: function onClick() {},\n    direction: dialDirection\n  }, createElement(SpeedDialAction, {\n    key: 'sda-connect-wallet',\n    icon: createElement(AccountBalanceWalletIcon, null),\n    tooltipTitle: 'Connect Wallet',\n    onClick: function onClick() {\n      connectWallet();\n    }\n  }), installedApps.map(function (installedApp, i) {\n    return createElement(SpeedDialAction, {\n      key: \"sd-action-\" + installedApp.id + \"-\" + i,\n      icon: createElement(PetsIcon, null),\n      tooltipTitle: installedApp.app.name + \" (#\" + installedApp.id + \")\",\n      onClick: function onClick() {\n        var scriptID = \"byoa-\" + installedApp.id + \"-\" + installedApp.app.id;\n        var existingApp = document.getElementById(scriptID);\n\n        if (!existingApp) {\n          var script = document.createElement('script');\n          script.src = transformIPFSToPinned(installedApp.byoaDetails.uri);\n          script.id = scriptID;\n\n          if (installedApp.byoaDetails.target == \"host\") {\n            document.body.appendChild(script);\n\n            script.onload = function () {\n              console.log('loaded script');\n            };\n          }\n        }\n      }\n    });\n  })))));\n};\n\nexport { ByoaSDK };","map":{"version":3,"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/components/DragMove.tsx","../src/index.tsx"],"names":["DragMove","props","onPointerDown","onPointerUp","onPointerMove","onDragMove","children","style","className","isDragging","setIsDragging","useState","handlePointerDown","handlePointerUp","handlePointerMove","byoaContractAddress","providerNetwork","useStyles","makeStyles","root","position","top","left","minWidth","minHeight","background","pointerEvents","speedDial","bottom","right","zIndex","byoaButton","providerOptions","walletconnect","display","name","options","infuraId","web3Modal","network","cacheProvider","disableInjectedProvider","ByoaSDK","classes","translateDial","setTranslateDial","x","y","dialDirection","setDialDirection","React","openDial","setOpenDial","provider","setProvider","web3","setWeb3","accountAddress","setAccountAddress","installedApps","setInstalledApps","connectWallet","p","console","disconnectWallet","w3","method","accounts","setTimeout","refreshMyApps","error","alert","getTokenMetadata","resolve","meta","image","byoa","browser","uri","target","transformIPFSToPinned","contract","abi","appLUT","allInstalls","tid","parseInt","myTokenIds","id","appDetails","description","tokenURI","owner","price","address","version","ia","app","imageURI","tokenMeta","byoaDetails","e","movementY","transform","ariaLabel","hidden","icon","open","onOpen","onClose","onClick","direction","key","tooltipTitle","installedApp","i","scriptID","existingApp","document","script"],"mappings":";;;;;;;mCAAA;;AACO,MAAM,KAAK,GAAA,aAAiB,YAAW;AAC7C,WAAS,KAAT,GAAiB,CAAE;;AACnB,EAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,UAAS,WAAT,EAAsB,UAAtB,EAAkC;AACxD,UAAM,MAAM,GAAG,IAAI,KAAJ,EAAf;AACA,UAAM,KAAK,GAAG,KAAK,CAAnB;;AACA,QAAI,KAAJ,EAAW;AACV,YAAM,QAAQ,GAAG,KAAK,GAAG,CAAR,GAAY,WAAZ,GAA0B,UAA3C;;AACA,UAAI,QAAJ,EAAc;AACb,YAAI;AACH,UAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,QAAQ,CAAC,KAAK,CAAN,CAApB,CAAP;AACA,SAFD,CAEE,OAAO,CAAP,EAAU;AACX,UAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,CAAP;AACA;;AACD,eAAO,MAAP;AACA,OAPD,MAOO;AACN,eAAO,IAAP;AACA;AACD;;AACD,SAAK,CAAL,GAAS,UAAS,KAAT,EAAgB;AACxB,UAAI;AACH,cAAM,KAAK,GAAG,KAAK,CAAC,CAApB;;AACA,YAAI,KAAK,CAAC,CAAN,GAAU,CAAd,EAAiB;AAChB,UAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,WAAW,GAAG,WAAW,CAAC,KAAD,CAAd,GAAwB,KAA/C,CAAP;AACA,SAFD,MAEO,IAAI,UAAJ,EAAgB;AACtB,UAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,UAAU,CAAC,KAAD,CAAtB,CAAP;AACA,SAFM,MAEA;AACN,UAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,KAAZ,CAAP;AACA;AACD,OATD,CASE,OAAO,CAAP,EAAU;AACX,QAAA,OAAO,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,CAAP;AACA;AACD,KAbD;;AAcA,WAAO,MAAP;AACF,GA/BC;;AAgCA,SAAO,KAAP;AACA,CAnCiC,EAA3B,C,CAqCP;;;AACO,SAAS,OAAT,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AAC3C,MAAI,CAAC,IAAI,CAAC,CAAV,EAAa;AACZ,QAAI,KAAK,YAAY,KAArB,EAA4B;AAC3B,UAAI,KAAK,CAAC,CAAV,EAAa;AACZ,YAAI,KAAK,GAAG,CAAZ,EAAe;AACd,UAAA,KAAK,GAAG,KAAK,CAAC,CAAd;AACA;;AACD,QAAA,KAAK,GAAG,KAAK,CAAC,CAAd;AACA,OALD,MAKO;AACN,QAAA,KAAK,CAAC,CAAN,GAAU,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB,CAAV;AACA;AACA;AACD;;AACD,QAAI,KAAK,IAAI,KAAK,CAAC,IAAnB,EAAyB;AACxB,MAAA,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB,CAAX,EAA4C,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,CAAzB,CAA5C;AACA;AACA;;AACD,IAAA,IAAI,CAAC,CAAL,GAAS,KAAT;AACA,IAAA,IAAI,CAAC,CAAL,GAAS,KAAT;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,CAAtB;;AACA,QAAI,QAAJ,EAAc;AACb,MAAA,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;AACD;;AAEM,SAAS,cAAT,CAAwB,QAAxB,EAAkC;AACxC,SAAO,QAAQ,YAAY,KAApB,IAA6B,QAAQ,CAAC,CAAT,GAAa,CAAjD;AACA,C,CA8CD;;;AACO,SAAS,MAAT,CAAgB,KAAhB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC;AAC1C,MAAI,CAAC,GAAG,CAAC,CAAT;AAAA,MAAY,IAAZ;AAAA,MAAkB,MAAlB;;AACA,WAAS,MAAT,CAAgB,MAAhB,EAAwB;AACvB,QAAI;AACH,aAAO,EAAE,CAAF,GAAM,KAAK,CAAC,MAAZ,KAAuB,CAAC,KAAD,IAAU,CAAC,KAAK,EAAvC,CAAP,EAAmD;AAClD,QAAA,MAAM,GAAG,IAAI,CAAC,CAAD,CAAb;;AACA,YAAI,MAAM,IAAI,MAAM,CAAC,IAArB,EAA2B;AAC1B,cAAI,cAAc,CAAC,MAAD,CAAlB,EAA4B;AAC3B,YAAA,MAAM,GAAG,MAAM,CAAC,CAAhB;AACA,WAFD,MAEO;AACN,YAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAAM,KAAK,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,IAAI,GAAG,IAAI,KAAJ,EAA1B,EAAuC,CAAvC,CAAd,CAA1B;AACA;AACA;AACD;AACD;;AACD,UAAI,IAAJ,EAAU;AACT,QAAA,OAAO,CAAC,IAAD,EAAO,CAAP,EAAU,MAAV,CAAP;AACA,OAFD,MAEO;AACN,QAAA,IAAI,GAAG,MAAP;AACA;AACD,KAjBD,CAiBE,OAAO,CAAP,EAAU;AACX,MAAA,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAJ,EAAZ,CAAL,EAA+B,CAA/B,EAAkC,CAAlC,CAAP;AACA;AACD;;AACD,EAAA,MAAM;;AACN,SAAO,IAAP;AACA;;AAwBM,MAAM,eAAe,GAAA,aAAiB,OAAO,MAAP,KAAkB,WAAlB,GAAiC,MAAM,CAAC,QAAP,KAAoB,MAAM,CAAC,QAAP,GAAkB,MAAM,CAAC,iBAAD,CAA5C,CAAjC,GAAqG,YAA3I;;AA6DA,MAAM,oBAAoB,GAAA,aAAiB,OAAO,MAAP,KAAkB,WAAlB,GAAiC,MAAM,CAAC,aAAP,KAAyB,MAAM,CAAC,aAAP,GAAuB,MAAM,CAAC,sBAAD,CAAtD,CAAjC,GAAoH,iBAA/J,C,CAgVP;;;AACO,SAAS,MAAT,CAAgB,IAAhB,EAAsB,OAAtB,EAA+B;AACrC,MAAI;AACH,QAAI,MAAM,GAAG,IAAI,EAAjB;AACA,GAFD,CAEE,OAAM,CAAN,EAAS;AACV,WAAO,OAAO,CAAC,CAAD,CAAd;AACA;;AACD,MAAI,MAAM,IAAI,MAAM,CAAC,IAArB,EAA2B;AAC1B,WAAO,MAAM,CAAC,IAAP,CAAY,KAAK,CAAjB,EAAoB,OAApB,CAAP;AACA;;AACD,SAAO,MAAP;AACD;;SCzjBwBA,Q,CAASC,K,EAAAA;AAC/B,MACEC,aADF,GAQID,KARJ,CAAA,aAAA;AAAA,MAEEE,WAFF,GAQIF,KARJ,CAAA,WAAA;AAAA,MAGEG,aAHF,GAQIH,KARJ,CAAA,aAAA;AAAA,MAIEI,UAJF,GAQIJ,KARJ,CAAA,UAAA;AAAA,MAKEK,QALF,GAQIL,KARJ,CAAA,QAAA;AAAA,MAMEM,KANF,GAQIN,KARJ,CAAA,KAAA;AAAA,MAOEO,SAPF,GAQIP,KARJ,CAAA,SAAA;;AAUA,MAAA,SAAA,GAAoCU,QAAQ,CAA5C,KAA4C,CAA5C;AAAA,MAAOF,UAAP,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,MAAmBC,aAAnB,GAAA,SAAA,CAAA,CAAA,CAAA;;AAGA,MAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,CAAA,EAAA;AACxBF,IAAAA,aAAa,CAAbA,IAAa,CAAbA;AAEAR,IAAAA,aAAa,CAAbA,CAAa,CAAbA;AAHF,GAAA;;AAOA,MAAMW,eAAe,GAAG,SAAlBA,eAAkB,CAAA,CAAA,EAAA;AACtBH,IAAAA,aAAa,CAAbA,KAAa,CAAbA;AAEAP,IAAAA,WAAW,CAAXA,CAAW,CAAXA;AAHF,GAAA;;AAOA,MAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,CAAA,EAAA;AACxB,QAAA,UAAA,EAAgBT,UAAU,CAAVA,CAAU,CAAVA;AAEhBD,IAAAA,aAAa,CAAbA,CAAa,CAAbA;AAHF,GAAA;;AAMA,SACE,cAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACEF,IAAAA,aAAa,EAAEU,iBADjB;AAEET,IAAAA,WAAW,EAAEU,eAFf;AAGET,IAAAA,aAAa,EAAEU,iBAHjB;AAIEP,IAAAA,KAAK,EAAEA,KAJT;AAKEC,IAAAA,SAAS,EAAEA;AALb,GAAA,EADF,QACE,CADF;AAWD;;AAEDR,QAAQ,CAARA,YAAAA,GAAwB;AACtBE,EAAAA,aAAa,EAAE,SAAA,aAAA,GAAA,CADO,CAAA;AAEtBC,EAAAA,WAAW,EAAE,SAAA,WAAA,GAAA,CAFS,CAAA;AAGtBC,EAAAA,aAAa,EAAE,SAAA,aAAA,GAAA,CAAA;AAHO,CAAxe,mBAAmB,GAAzB,4CAAA;AACA,IAAMC,eAAe,GAArB,uBAAA;AAEA,IAAMC,SAAS,GAAGC,UAAU,CAAC;AAC3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EADJ,OAAA;AAEJC,IAAAA,GAAG,EAFC,CAAA;AAGJC,IAAAA,IAAI,EAHA,CAAA;AAIJC,IAAAA,QAAQ,EAJJ,OAAA;AAKJC,IAAAA,SAAS,EALL,OAAA;AAMJC,IAAAA,UAAU,EANN,mBAAA;AAOJC,IAAAA,aAAa,EAAE;AAPX,GADqB;AAU3BC,EAAAA,SAAS,EAAE;AACTP,IAAAA,QAAQ,EADC,OAAA;AAETQ,IAAAA,MAAM,EAFG,EAAA;AAGTC,IAAAA,KAAK,EAHI,EAAA;AAITC,IAAAA,MAAM,EAAE;AAJC,GAVgB;AAgB3BC,EAAAA,UAAU,EAAE;AAhBe,CAAD,CAA5B;AAqBA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KADI;AAIb,eAJa,qBAAA;AAKbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AADH;AALI;AADO,CAAxB;AAYA,IAAMC,SAAS,GAAG,IAAA,SAAA,CAAc;AAC9BC,EAAAA,OAAO,EADuB,eAAA;AAE9BC,EAAAA,aAAa,EAFiB,IAAA;AAG9BC,EAAAA,uBAAuB,EAHO,KAAA;AAI9BT,EAAAA,eAAe,EAAfA;AAJ8B,CAAd,CAAlB;;AAQA,IAAaU,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA;AACrB,MAAMC,OAAO,GAAG1B,SAAhB,EAAA;;AACA,MAAA,eAAA,GAA0C,QAAA,CAAe;AACvD6B,IAAAA,CAAC,EADsD,CAAA;AAEvDC,IAAAA,CAAC,EAAE;AAFoD,GAAf,CAA1C;AAAA,MAAOH,aAAP,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,MAAsBC,gBAAtB,GAAA,eAAA,CAAA,CAAA,CAAA;;AAIA,MAAA,gBAAA,GAA0CK,QAAAA,CAA1C,IAA0CA,CAA1C;AAAA,MAAOF,aAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAsBC,gBAAtB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAA,gBAAA,GAAgCC,QAAAA,CAAhC,KAAgCA,CAAhC;AAAA,MAAOC,QAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAiBC,WAAjB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAA,gBAAA,GAAgCF,QAAAA,CAAhC,IAAgCA,CAAhC;AAAA,MAAOG,QAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAiBC,WAAjB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAA,gBAAA,GAAwBJ,QAAAA,CAAxB,IAAwBA,CAAxB;AAAA,MAAOK,IAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAaC,OAAb,GAAA,gBAAA,CAAA,CAAA,CAAA;;AACA,MAAA,gBAAA,GAA4CN,QAAAA,CAA5C,IAA4CA,CAA5C;AAAA,MAAOO,cAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAuBC,iBAAvB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAEA,MAAA,gBAAA,GAA0CR,QAAAA,CAA1C,EAA0CA,CAA1C;AAAA,MAAOS,aAAP,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAAsBC,gBAAtB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAGA,MAAMC,aAAa,GAAA,SAAbA,aAAa,GAAA;AAAA,QAAA;;gDACb;AAAA,iBAAA,MAAA,CAAA,OAAA,EAAA;AAAA,cAAA,MAAA,EAAA,OAAA,OAAA;AAiBF,cAAII,EAAE,GAAN,IAAA;;AACA,cAAIA,EAAE,KAAN,IAAA,EAAiB;AACfA,YAAAA,EAAE,GAAG,IAAA,IAAA,CAALA,CAAK,CAALA;;AACA,gBAAIA,EAAE,KAAN,IAAA,EAAiB;AACf,oBAAM,IAAA,KAAA,CAAN,wBAAM,CAAN;AACD;;AACDT,YAAAA,OAAO,CAAPA,EAAO,CAAPA;AACD;;AAxBC,iBAAA,OAAA,CAAA,OAAA,CA0BqB,CAAC,CAAD,OAAA,CAAU;AAACU,YAAAA,MAAM,EAAE;AAAT,WAAV,CA1BrB,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AAAA,gBA2BEC,QAAQ,CAARA,MAAAA,GA3BF,CAAA,EAAA;AA4BAT,cAAAA,iBAAiB,CAACS,QAAQ,CAA1BT,CAA0B,CAAT,CAAjBA;AACAU,cAAAA,UAAU,CAAA,YAAA;AAAA,oBAAA;AACNC,kBAAAA,aAAa,CAACF,QAAQ,CAAtBE,CAAsB,CAAT,CAAbA;;AADM,iBAAA,CAAA,OAAA,CAAA,EAAA;AAAA,yBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,eAAA,EAAVD,IAAU,CAAVA;AA7BA;AAAA,WAAA,CAAA;AAAA;;AACF,YAAIN,CAAC,GAAL,QAAA;;AADE,YAAA,KAAA,GAAA,YAAA;AAAA,cAEEA,CAAC,KAFH,IAAA,EAAA;AAAA,mBAAA,OAAA,CAAA,OAAA,CAGUxB,SAAS,CAHnB,OAGUA,EAHV,EAAA,IAAA,CAAA,UAAA,kBAAA,EAAA;AAGAwB,cAAAA,CAAC,GAADA,kBAAAA;;AACA,kBAAGA,CAAC,KAAJ,IAAA,EAAe;AACb,sBAAM,IAAA,KAAA,CAAN,qCAAM,CAAN;AACD;;AACDA,cAAAA,CAAC,CAADA,EAAAA,CAAAA,iBAAAA,EAAwB,UAAA,CAAA,EAAA;AACpBC,gBAAAA,OAAO,CAAPA,GAAAA,CAAAA,CAAAA;AACFC,gBAAAA,gBAAgB;AAFlBF,eAAAA;AAIIA,cAAAA,CAAC,CAADA,EAAAA,CAAAA,cAAAA,EAAqB,UAAA,OAAA,EAAA;AACjBC,gBAAAA,OAAO,CAAPA,GAAAA,CAAY,WAAZA,OAAAA;AADJD,eAAAA;AAGJR,cAAAA,WAAW,CAAXA,CAAW,CAAXA;AAdA,aAAA,CAAA;AAAA;AAAA,SAAA,EAAA;;AAAA,eAAA,KAAA,IAAA,KAAA,CAAA,IAAA,GAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA,KAAA,CAAA;AAiCH,O,EAAA,UAAQgB,KAAR,EAAe;AACdP,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACAQ,QAAAA,KAAK,CAALA,6CAAK,CAALA;AACD,O;AArCgB,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAnB,GAAA;;AAwCA,MAAMP,gBAAgB,GAAA,SAAhBA,gBAAgB,GAAA;AAAA,QAAA;6BACd1B,SAAS,CAATA,mBAAAA,E,EAAAA,I,CAAAA,YAAAA;AACNgB,QAAAA,WAAW,CAAXA,IAAW,CAAXA;AACAI,QAAAA,iBAAiB,CAAjBA,IAAiB,CAAjBA;;AAHoB,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAtB,GAAA;;AAMA,MAAMc,gBAAgB,GAAA,SAAhBA,gBAAgB,CAAA,GAAA,EAAA;AAAA,QAAA;AACpB,aAAA,OAAA,CAAA,OAAA,CAAO,IAAA,OAAA,CAAkB,UAAA,OAAA,EAAA;AACvBC,QAAAA,OAAO,CAAC;AACNC,UAAAA,IAAI,EADE,GAAA;AAENC,UAAAA,KAAK,EAFC,6DAAA;AAGNC,UAAAA,IAAI,EAAE;AACJC,YAAAA,OAAO,EAAE;AACPC,cAAAA,GAAG,EADI,2CAAA;AAEPC,cAAAA,MAAM,EAAE;AAFD;AADL;AAHA,SAAD,CAAPN;AADF,OAAO,CAAP,CAAA;AADoB,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAtB,GAAA;;AAeA,MAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,OAAA,EAAA;AAC5B,WAAA,KAAA,OAAA;AADF,GAAA;;AAIA,MAAMX,aAAa,GAAA,SAAbA,aAAa,CAAA,aAAA,EAAA;AAAA,QAAA;AACjB,UAAIJ,EAAE,GAAG,IAAA,IAAA,CAAT,eAAS,CAAT;;sCACI;AAEA,YAAIgB,QAAQ,GAAG,IAAIhB,EAAE,CAAFA,GAAAA,CAAJ,QAAA,CAAoBiB,KAAG,CAAvB,GAAA,EAAf,mBAAe,CAAf;AAFA,eAAA,OAAA,CAAA,OAAA,CAIuBD,QAAQ,CAARA,OAAAA,CAAAA,aAAAA,CAA+BxB,cAAc,GAAA,cAAA,GAA7CwB,aAAAA,EAJvB,IAIuBA,EAJvB,EAAA,IAAA,CAAA,UAAA,UAAA,EAAA;AAAA,mBAAA,MAAA,GAAA;AA6CAlB,YAAAA,OAAO,CAAPA,GAAAA,CAAAA,WAAAA;AACAH,YAAAA,gBAAgB,CAAhBA,WAAgB,CAAhBA;AA9CA;;AAKAG,UAAAA,OAAO,CAAPA,GAAAA,CAAAA,UAAAA;AAEA,cAAIoB,MAAM,GAAV,EAAA;AAGA,cAAIC,WAAW,GAAf,EAAA;;AAVA,cAAA,MAAA,GAAA,MAAA,CAAA,UAAA,EAAA,UAAA,CAAA,EAW6C;AACzC,gBAAIC,GAAG,GAAGC,QAAQ,CAACC,UAAU,CAA7B,CAA6B,CAAX,CAAlB;AADyC,mBAAA,OAAA,CAAA,OAAA,CAEfN,QAAQ,CAARA,OAAAA,CAAAA,iBAAAA,CAAAA,GAAAA,EAFe,IAEfA,EAFe,EAAA,IAAA,CAAA,UAAA,aAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CAGdA,QAAQ,CAARA,OAAAA,CAAAA,QAAAA,CAAAA,GAAAA,EAHc,IAGdA,EAHc,EAAA,IAAA,CAAA,UAAA,cAAA,EAAA;AAAA,uBAAA,OAAA,CAAA,OAAA,CAInBT,gBAAgB,CAJG,cAIH,CAJG,EAAA,IAAA,CAAA,UAAA,SAAA,EAAA;AAAA,2BAAA,MAAA,GAAA;AAqBzC,wBAAIwB,EAAE,GAAkB;AACpBR,sBAAAA,EAAE,EADkB,GAAA;AAEpBG,sBAAAA,QAAQ,EAFY,cAAA;AAGpBM,sBAAAA,GAAG,EAAEd,MAAM,CAHS,aAGT,CAHS;AAIpBe,sBAAAA,QAAQ,EAAEC,SAAS,CAJC,KAAA;AAKpBC,sBAAAA,WAAW,EAAE;AACXtB,wBAAAA,GAAG,EAAEqB,SAAS,CAATA,IAAAA,CAAAA,OAAAA,CADM,GAAA;AAEXpB,wBAAAA,MAAM,EAAEoB,SAAS,CAATA,IAAAA,CAAAA,OAAAA,CAAuBpB;AAFpB;AALO,qBAAxB;AAWAK,oBAAAA,WAAW,CAAXA,IAAAA,CAAAA,EAAAA;AAhCyC;;AAAA,sBAAA,MAAA,GAAA,YAAA;AAAA,wBAMtCD,MAAM,CAANA,aAAM,CAANA,KANsC,IAAA,EAAA;AAAA,6BAAA,OAAA,CAAA,OAAA,CAOhBF,QAAQ,CAARA,OAAAA,CAAAA,iBAAAA,CAAmCK,QAAQ,CAA3CL,aAA2C,CAA3CA,EAPgB,IAOhBA,EAPgB,EAAA,IAAA,CAAA,UAAA,UAAA,EAAA;AAQvCE,wBAAAA,MAAM,CAANA,aAAM,CAANA,GACA;AACEK,0BAAAA,EAAE,EADJ,aAAA;AAEErD,0BAAAA,IAAI,EAAEsD,UAAU,CAFlB,CAEkB,CAFlB;AAGEC,0BAAAA,WAAW,EAAED,UAAU,CAHzB,CAGyB,CAHzB;AAIEE,0BAAAA,QAAQ,EAAEF,UAAU,CAJtB,CAIsB,CAJtB;AAKEG,0BAAAA,KAAK,EAAEH,UAAU,CALnB,CAKmB,CALnB;AAMEI,0BAAAA,KAAK,EAAEP,QAAQ,CAACG,UAAU,CAN5B,CAM4B,CAAX,CANjB;AAOEK,0BAAAA,OAAO,EAPT,mBAAA;AAQEC,0BAAAA,OAAO,EAAE;AARX,yBADAZ;AARuC,uBAAA,CAAA;AAAA;AAAA,mBAAA,EAAA;;AAAA,yBAAA,MAAA,IAAA,MAAA,CAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA;AAAA,iBAAA,CAAA;AAAA,eAAA,CAAA;AAAA,aAAA,CAAA;AAX7C,WAAA,CAAA;;AAAA,iBAAA,MAAA,IAAA,MAAA,CAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA;AAAA,SAAA,CAAA;AAgDH,O,EAAA,UAAQb,KAAR,EAAgB;AACfP,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,0BAAAA,KAAAA;AACD,O;;;AApDgB,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAnB,GAAA;;AAuDA,SACE,aAAA,CAAA,GAAA,EAAA;AAAKvD,IAAAA,SAAS,EAAEmC,OAAO,CAACxB;AAAxB,GAAA,EACE,aAAA,CAAA,SAAA,EAAA;AAAWX,IAAAA,SAAS,EAAEmC,OAAO,CAAChB;AAA9B,GAAA,EACE,aAAA,CAAA,QAAA,EAAA;AAAUtB,IAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,CAAA,EAAA;AACpBwC,MAAAA,gBAAgB,CAAC;AACfC,QAAAA,CAAC,EAAEF,aAAa,CAAbA,CAAAA,GAAkByD,CAAC,CADP,SAAA;AAEftD,QAAAA,CAAC,EAAEH,aAAa,CAAbA,CAAAA,GAAkByD,CAAC,CAACC;AAFR,OAAD,CAAhBzD;;AAIA,UAAIwD,CAAC,CAADA,OAAAA,GAAJ,GAAA,EAAqB;AACnB,YAAIrD,aAAa,KAAjB,MAAA,EAA8BC,gBAAgB,CAAhBA,MAAgB,CAAhBA;AAC/B;;AACD,UAAIoD,CAAC,CAADA,OAAAA,GAAJ,GAAA,EAAqB;AACnB,YAAIrD,aAAa,KAAjB,IAAA,EAA4BC,gBAAgB,CAAhBA,IAAgB,CAAhBA;AAC7B;AACF;AAXD,GAAA,EAYE,aAAA,CAAA,SAAA,EAAA;AACE1C,IAAAA,KAAK,EAAE;AACLgG,MAAAA,SAAS,EAAA,gBAAgB3D,aAAa,CAA7B,CAAA,GAAA,iBAAA,GAAiDA,aAAa,CAA9D,CAAA,GAAA;AADJ,KADT;AAIE4D,IAAAA,SAAS,EAAC,iBAJZ;AAKEC,IAAAA,MAAM,EAAE,KALV;AAMEC,IAAAA,IAAI,EAAE,aAAA,CAAA,UAAA,EAAA;AAAYlG,MAAAA,SAAS,EAAEmC,OAAO,CAACZ;AAA/B,KAAA,EAAA,KAAA,CANR;AAOE4E,IAAAA,IAAI,EAAExD,QAPR;AAQEyD,IAAAA,MAAM,EAAE,SAAA,MAAA,GAAA;AACNxD,MAAAA,WAAW,CAAXA,IAAW,CAAXA;AACD,KAVH;AAWEyD,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AACPzD,MAAAA,WAAW,CAAXA,KAAW,CAAXA;AACD,KAbH;AAcE0D,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA,CAAA,CAdX;AAiBEC,IAAAA,SAAS,EAAE/D;AAjBb,GAAA,EAmBE,aAAA,CAAA,eAAA,EAAA;AACEgE,IAAAA,GAAG,EAAE,oBADP;AAEEN,IAAAA,IAAI,EAAExD,aAAAA,CAAAA,wBAAAA,EAAAA,IAAAA,CAFR;AAGE+D,IAAAA,YAAY,EAAE,gBAHhB;AAIEH,IAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AACPjD,MAAAA,aAAa;AACd;AANH,GAAA,CAnBF,EA2BG,aAAa,CAAb,GAAA,CAAkB,UAAA,YAAA,EAAA,CAAA,EAAA;AAAA,WACjB,aAAA,CAAA,eAAA,EAAA;AACEmD,MAAAA,GAAG,EAAA,eAAeE,YAAY,CAA3B,EAAA,GAAA,GAAA,GAAkCC,CADvC;AAEET,MAAAA,IAAI,EAAExD,aAAAA,CAAAA,QAAAA,EAAAA,IAAAA,CAFR;AAGE+D,MAAAA,YAAY,EAAKC,YAAY,CAAZA,GAAAA,CAAL,IAAKA,GAAL,KAAKA,GAA2BA,YAAY,CAA5C,EAAKA,GAAL,GAHd;AAIEJ,MAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AACP,YAAIM,QAAQ,GAAA,UAAWF,YAAY,CAAvB,EAAA,GAAA,GAAA,GAA8BA,YAAY,CAAZA,GAAAA,CAA1C,EAAA;AACA,YAAMG,WAAW,GAAGC,QAAQ,CAARA,cAAAA,CAApB,QAAoBA,CAApB;;AACA,YAAI,CAAJ,WAAA,EAAkB;AAChB,cAAMC,MAAM,GAAGD,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AACAC,UAAAA,MAAM,CAANA,GAAAA,GAAavC,qBAAqB,CAACkC,YAAY,CAAZA,WAAAA,CAAnCK,GAAkC,CAAlCA;AACAA,UAAAA,MAAM,CAANA,EAAAA,GAAAA,QAAAA;;AACA,cAAGL,YAAY,CAAZA,WAAAA,CAAAA,MAAAA,IAAH,MAAA,EAA8C;AAC5CI,YAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,MAAAA;;AACAC,YAAAA,MAAM,CAANA,MAAAA,GAAgB,YAAA;AAEdxD,cAAAA,OAAO,CAAPA,GAAAA,CAAAA,eAAAA;AAFFwD,aAAAA;AAID;AACF;AACF;AAnBH,KAAA,CADiB;AA1C7B,GA0CW,CA3BH,CAZF,CADF,CADF,CADF;AAvIK,CAAP","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React, { useState } from \"react\";\n\n// @ts-expect-error\nexport default function DragMove(props) {\n  const {\n    onPointerDown,\n    onPointerUp,\n    onPointerMove,\n    onDragMove,\n    children,\n    style,\n    className\n  } = props;\n\n  const [isDragging, setIsDragging] = useState(false);\n\n  // @ts-expect-error\n  const handlePointerDown = (e) => {\n    setIsDragging(true);\n\n    onPointerDown(e);\n  };\n\n  // @ts-expect-error\n  const handlePointerUp = (e) => {\n    setIsDragging(false);\n\n    onPointerUp(e);\n  };\n\n  // @ts-expect-error\n  const handlePointerMove = (e) => {\n    if (isDragging) onDragMove(e);\n\n    onPointerMove(e);\n  };\n\n  return (\n    <div\n      onPointerDown={handlePointerDown}\n      onPointerUp={handlePointerUp}\n      onPointerMove={handlePointerMove}\n      style={style}\n      className={className}\n    >\n      {children}\n    </div>\n  );\n}\n\nDragMove.defaultProps = {\n  onPointerDown: () => {},\n  onPointerUp: () => {},\n  onPointerMove: () => {}\n};\n","import { Box, Container, makeStyles, Typography } from '@material-ui/core';\nimport { SpeedDial, SpeedDialAction } from '@material-ui/lab';\nimport * as React from 'react';\nimport DragMove from './components/DragMove';\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport PetsIcon from '@material-ui/icons/Pets';\n\nimport Web3 from 'web3';\nimport Web3Modal from \"web3modal\";\nimport { InstalledApp } from './types/installedApp';\nimport abi from './utils/abi/Byoa.json';\n\ninterface Props {\n  dataPipe? : {\n    data: any\n  }\n}\n\nconst byoaContractAddress = `0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512`;\nconst providerNetwork = `http://localhost:8545`;\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    minWidth: '100vw',\n    minHeight: '100vh',\n    background: 'rgba(50,0,0,0.25)',\n    pointerEvents: 'none'\n  },\n  speedDial: {\n    position: 'fixed',\n    bottom: 20,\n    right: 20,\n    zIndex: 1000000000\n  },\n  byoaButton: {\n\n  }\n});\n\nconst providerOptions = {  \n  walletconnect: {\n    display: {\n      name: \"Mobile\"\n    },\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"6430aa46e9354b91bea44e464af71f7a\" // required\n    }\n  }\n};\n\nconst web3Modal = new Web3Modal({\n  network: providerNetwork, // optional\n  cacheProvider: true, // optional\n  disableInjectedProvider: false,\n  providerOptions // required\n});\n\n// @ts-expect-error\nexport const ByoaSDK = (props : Props) => {\n  const classes = useStyles();\n  const [translateDial, setTranslateDial] = React.useState({\n    x: 0,\n    y: 0\n  });\n  const [dialDirection, setDialDirection] = React.useState<\"left\" | \"right\" | \"up\" | \"down\" | undefined>(\"up\");\n  const [openDial, setOpenDial] = React.useState(false);\n  const [provider, setProvider] = React.useState<any>(null);\n  const [web3, setWeb3] = React.useState<any>(null);\n  const [accountAddress, setAccountAddress] = React.useState<String | null>(null);\n\n  const [installedApps, setInstalledApps] = React.useState<InstalledApp[]>([]);\n\n  \n  const connectWallet = async () => {\n    try {\n      let p = provider;\n      if (p === null) {\n        p = await web3Modal.connect();\n        if(p === null) {\n          throw new Error('Unable to connect provider to modal');\n        }\n        p.on('accountsChanged', (e : any) => {\n            console.log(e);\n          disconnectWallet();\n        });\n            p.on(\"chainChanged\", (chainId: number) => {\n                console.log(\"chain \" + chainId);\n            });\n        setProvider(p);\n      }\n\n      let w3 = web3;\n      if (w3 === null) {\n        w3 = new Web3(p);\n        if (w3 === null) {\n          throw new Error('Unable to connect web3');\n        }\n        setWeb3(w3);\n      }\n\n      const accounts = await p.request({method: 'eth_accounts'});\n      if (accounts.length > 0) {\n        setAccountAddress(accounts[0]);\n        setTimeout( async () => {\n            refreshMyApps(accounts[0]);\n        }, 2000);\n      }\n    } catch (error) {\n      console.log(error);\n      alert('Unable to connect wallet. Please try again.');\n    }\n  };\n\n  const disconnectWallet = async () => {\n    await web3Modal.clearCachedProvider();\n    setProvider(null);\n    setAccountAddress(null);\n  };\n\n  const getTokenMetadata = async (uri : string) : Promise<any> =>  {\n    return new Promise<any>( (resolve) => {\n      resolve({\n        meta: uri,\n        image: \"ipfs://QmYoSTehmdFUnSYCFrYdvSrEtNGy9U5gWEfroCTMGecHKw/0.png\",\n        byoa: {\n          browser: {\n            uri: \"http://localhost:3000/scripts/example1.js\",\n            target: \"host\"\n          }\n        }\n      });\n    });\n  };\n\n  const transformIPFSToPinned = (ipfsURI : String) : String => {\n    return `${ipfsURI}`;\n  }\n\n  const refreshMyApps = async (addressHelper : String | undefined | null) => {\n    let w3 = new Web3(providerNetwork);\n    try {\n        // @ts-expect-error\n        let contract = new w3.eth.Contract(abi.abi, byoaContractAddress);\n      \n        let myTokenIds = await contract.methods.walletOfOwner(accountAddress ? accountAddress : addressHelper).call();\n        console.log(myTokenIds);\n\n        let appLUT : any = {};\n        \n\n        let allInstalls : InstalledApp[] = [];\n        for (var i = 0; i < myTokenIds.length; i ++) {\n            let tid = parseInt(myTokenIds[i]);\n            let appIdForToken = await contract.methods.getAppIdByTokenId(tid).call();\n            let directTokenURI = await contract.methods.tokenURI(tid).call();\n            let tokenMeta = await getTokenMetadata(directTokenURI);\n            \n            if(appLUT[appIdForToken] !== null) {\n              let appDetails = await contract.methods.getAppDetailsById(parseInt(appIdForToken)).call();\n              appLUT[appIdForToken] = \n              {\n                id: appIdForToken,\n                name: appDetails[0],\n                description: appDetails[1],\n                tokenURI: appDetails[2],\n                owner: appDetails[3],\n                price: parseInt(appDetails[4]),\n                address: byoaContractAddress,\n                version: 'beta v0.1' \n              }\n            }\n\n            let ia : InstalledApp = {\n                id: tid,\n                tokenURI: directTokenURI,\n                app: appLUT[appIdForToken],\n                imageURI: tokenMeta.image,\n                byoaDetails: {\n                  uri: tokenMeta.byoa.browser.uri,\n                  target: tokenMeta.byoa.browser.target\n                }\n            }\n\n            allInstalls.push(ia);\n        }\n        console.log(allInstalls)\n        setInstalledApps(allInstalls);\n      \n    } catch( error ) {\n      console.log(`Error fetching apps: ${error}`) ;\n    }\n  };\n  \n  return (\n    <Box className={classes.root}>\n      <Container className={classes.speedDial}>\n        <DragMove onDragMove={(e : any) => {\n          setTranslateDial({\n            x: translateDial.x + e.movementX,\n            y: translateDial.y + e.movementY\n          });\n          if (e.clientY < 200) {\n            if (dialDirection !== \"down\") setDialDirection(\"down\");\n          }\n          if (e.clientY > 200) {\n            if (dialDirection !== \"up\") setDialDirection(\"up\");\n          }\n        }}>\n          <SpeedDial\n            style={{\n              transform: `translateX(${translateDial.x}px) translateY(${translateDial.y}px)`\n            }}\n            ariaLabel=\"BYOA Speed Dial\"\n            hidden={false}\n            icon={<Typography className={classes.byoaButton}>RUN</Typography>}\n            open={openDial}\n            onOpen={() => {\n              setOpenDial(true);\n            }}\n            onClose={() => {\n              setOpenDial(false);\n            }}\n            onClick={() => {\n              \n            }}\n            direction={dialDirection}\n          >\n            <SpeedDialAction\n              key={'sda-connect-wallet'}\n              icon={<AccountBalanceWalletIcon />}\n              tooltipTitle={'Connect Wallet'}\n              onClick={() => {\n                connectWallet();\n              }}\n            />\n            {installedApps.map((installedApp, i) => (\n              <SpeedDialAction\n                key={`sd-action-${installedApp.id}-${i}`}\n                icon={<PetsIcon />}\n                tooltipTitle={`${installedApp.app.name} (#${installedApp.id})`}\n                onClick={() => {\n                  let scriptID = `byoa-${installedApp.id}-${installedApp.app.id}`;\n                  const existingApp = document.getElementById(scriptID);\n                  if (!existingApp) {\n                    const script = document.createElement('script');\n                    script.src = transformIPFSToPinned(installedApp.byoaDetails.uri) as string;\n                    script.id = scriptID;\n                    if(installedApp.byoaDetails.target == \"host\") {\n                      document.body.appendChild(script);\n                      script.onload = () => {\n                        // The script has loaded, possibly pass providers to it now\n                        console.log('loaded script');\n                      }\n                    }\n                  }\n                }}\n              />\n            ))}\n\n          </SpeedDial>\n        </DragMove>\n          \n      </Container>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}